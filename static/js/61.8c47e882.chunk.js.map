{"version":3,"sources":["views/admin/consulting/ModalDisease.tsx","views/admin/consulting/Diseases.tsx","views/admin/containers/FieldName.tsx"],"names":["validationSchema","values","Yup","shape","diseases_title","trim","required","ModalDisease","props","searchDiseases","show","initialValues","callApi","type","formRef","useRef","useState","searchCategoryText","setSearchCategoryText","data","loading","full","page","categories","setCategories","selectedCategory","setSelectedCategory","attention","setAttention","handleClose","current","resetForm","getConsultingCategories","categoryName","method","api","config","rest","adminGetConsultingCategories","response","status","SUCCESS","newCates","map","item","id","name","title_treatments","length","useEffect","group_treatments_name","group_treatments_id","validateForm","centered","onClose","closeOnBackdrop","onClick","dirty","className","size","style","textAlign","padding","display","justifyContent","width","color","md","innerRef","enableReinitialize","validate","onSubmit","body","Number","description","priority","adminConsultingDisease","errors","touched","handleChange","handleBlur","handleSubmit","isValid","FieldName","label","placeholder","invalid","maxLength","value","onBlur","onChange","selected","setSelected","defaultValue","setValue","callbackSearch","checked","marginLeft","rows","xs","disabled","thumbnail","Diseases","useApi","total","totalPages","diseases","setDiseases","modalDisease","setModalDisease","setStatus","popupDeleteDisease","setPopupDeleteDisease","searchName","setSearchName","fields","key","_style","isDate","renderContent","variant","marginRight","getDiseases","noItems","newPage","adminGetConsultingDiseases","index","no","Math","ceil","marginTop","isVisible","title","adminDeleteContent","leftButtonText","rightButtonText","leftButtonOnPress","rightButtonOnPress","marginBottom","Search","searchEmpty","listDiseaseStatus","items","noItemsViewSlot","hover","striped","scopedSlots","renderFields","pagination","children","minWidth"],"mappings":"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","file":"static/js/61.8c47e882.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport {\n  CCol,\n  CRow,\n  CModalBody,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CForm,\n  CInput,\n  CInvalidFeedback,\n  CFormGroup,\n  CTextarea,\n  CModalFooter,\n} from '@coreui/react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { validate } from '../../../utils';\nimport config from '../../../config';\nimport { SUCCESS } from '../../../store/callApi/actions';\nimport { CModal, SelectLoadmore, CModalHeader, CButtonClose } from '../../../components';\nimport FieldName from '../containers/FieldName';\n// import { useDispatch } from 'react-redux';\n// import { loadingRequest, loadingSuccess } from '../../../store/loading/actions';\n\nconst validationSchema = function (values: any) {\n  return Yup.object().shape({\n    diseases_title: Yup.string().trim().required('required'),\n  });\n};\n\ninterface Props {\n  type: 'create' | 'update;';\n  searchDiseases: () => void;\n  handleClose: () => void;\n  show: boolean;\n  initialValues: any;\n  callApi: any;\n}\n\nconst ModalDisease: React.FC<Props> = (props) => {\n  const { searchDiseases, show, initialValues, callApi, type } = props;\n  const formRef = useRef<any>(null);\n  // const dispatch = useDispatch();\n\n  // const [thumbnail, setThumbnail] = useState<any>('');\n  const [searchCategoryText, setSearchCategoryText] = useState('');\n  const [categories, setCategories] = useState<any>({ data: [], loading: true, full: false, page: 1 });\n  const [selectedCategory, setSelectedCategory] = useState<any>(null);\n\n  /**\n   * When user click submit, validate data and send to server, create or update a disease\n   * @param values values from form input Formik\n   */\n  const onSubmit = (values: { diseases_title: string; status: string; description: string; priority: any }) => {\n    const body = {\n      diseases_title: values.diseases_title.trim(),\n      group_treatments_id: selectedCategory.id,\n      status: Number(values.status),\n      description: values.description.trim(),\n      priority: values.priority ? (values.priority === 1 || values.priority.length === 1 ? 1 : 0) : 0,\n      // thumbnail: thumbnail,\n    };\n    callApi(\n      {\n        method: type === 'create' ? 'post' : 'put',\n        api: config.rest.adminConsultingDisease(initialValues.id),\n        body,\n        loading: true,\n      },\n      ({ status }: any) => {\n        if (status === SUCCESS) {\n          handleClose();\n          searchDiseases();\n        }\n      },\n    );\n  };\n\n  const [attention, setAttention] = useState(false);\n\n  /**\n   * Close modal function, reset form before close\n   */\n  const handleClose = () => {\n    formRef.current.resetForm();\n    props.handleClose();\n    setAttention(false);\n  };\n\n  /**\n   * Check whether to show a warning popup or not? Only show if some data is changed, if there is no change, close popup\n   */\n  const showAttention = () => {\n    if (\n      !formRef.current.dirty &&\n      (selectedCategory?.id || '') === initialValues.group_treatments_id\n      // && thumbnail === initialValues.thumbnail\n    ) {\n      handleClose();\n      return;\n    }\n    setAttention(true);\n  };\n\n  /**\n   * Get selected file (thumbnail of disease) and upload this to server storage\n   * @param e event when user done selected file\n   */\n  // const uploadThumbnail = (e: any) => {\n  //   let reader = new FileReader();\n  //   let file = e.target.files[0];\n  //   if (!file) return;\n\n  //   let link_api = '';\n  //   let link_avatar = '';\n\n  //   reader.onload = () => {\n  //     setThumbnail(reader.result);\n  //     dispatch(loadingRequest());\n  //     callApi(\n  //       {\n  //         method: 'get',\n  //         api: `/api/v1/upload/image-trainer-avatar?file_name=${file.name}`, //`/api/v1/upload/image-disease-avatar?file_name=${file.name}`,\n  //       },\n  //       (response: any) => {\n  //         if (response.status === SUCCESS) {\n  //           link_api = response?.data?.link;\n  //           link_avatar = response?.data?.file_path?.link;\n  //           let myHeaders = new Headers();\n  //           myHeaders.append('x-amz-acl', 'public-read');\n  //           const requestOptions: any = {\n  //             method: 'PUT',\n  //             headers: myHeaders,\n  //             body: file,\n  //             redirect: 'follow',\n  //           };\n  //           fetch(link_api, requestOptions)\n  //             .then((response) => response.text())\n  //             .then(() => {\n  //               dispatch(loadingSuccess());\n  //               setThumbnail(link_avatar);\n  //             })\n  //             .catch((error) => console.log('error', error));\n  //         } else {\n  //           dispatch(loadingSuccess());\n  //         }\n  //       },\n  //     );\n  //   };\n  //   reader.readAsDataURL(file);\n  // };\n\n  // const uploadRef = useRef<any>(null);\n\n  /**\n   * Call API to get all consulting categories from server, save categories to dropdown\n   * @param categoryName category search keyword from input\n   * @param page page number\n   */\n  const getConsultingCategories = (categoryName: string, page: number) => {\n    callApi(\n      {\n        method: 'get',\n        api: config.rest.adminGetConsultingCategories(page, categoryName, 80),\n      },\n      (response: any) => {\n        const { status, data } = response;\n        if (status === SUCCESS) {\n          setCategories((categories: any) => {\n            const newCates = data.categories.map((item: any) => {\n              return { id: item.id, name: item.title_treatments };\n            });\n            const cates =\n              page === 1 ? (categoryName === '' ? [null, ...newCates] : newCates) : [...categories.data, ...newCates];\n            return { data: cates, loading: false, full: data.categories.length < 10, page: page };\n          });\n        }\n      },\n    );\n  };\n\n  /**\n   * Whenever modal is shown, reset thumbnail, category, all values of form\n   */\n  useEffect(() => {\n    if (!show) return;\n\n    // setThumbnail(initialValues.thumbnail);\n    getConsultingCategories('', 1);\n    setSearchCategoryText(initialValues.group_treatments_name);\n    setSelectedCategory(\n      initialValues.group_treatments_id\n        ? { id: initialValues.group_treatments_id, name: initialValues.group_treatments_name }\n        : null,\n    );\n    formRef?.current?.resetForm();\n    formRef?.current?.validateForm();\n  }, [show]);\n\n  return (\n    <CModal centered show={show} onClose={handleClose} closeOnBackdrop={false}>\n      <CModalHeader>\n        {type === 'create' ? 'Create New' : 'Edit'} Consultation Topic\n        <CButtonClose onClick={showAttention} />\n      </CModalHeader>\n      <CModalBody className=\"popup--update-user\">\n        <CModal size=\"sm\" show={attention} centered closeOnBackdrop={false}>\n          <CModalBody style={{ textAlign: 'center', padding: 20 }}>\n            Are you sure you want to discard your changes?\n          </CModalBody>\n          <CModalFooter style={{ display: 'flex', justifyContent: 'space-around' }}>\n            <button className=\"btn btn-danger\" style={{ width: 120 }} color=\"danger\" onClick={handleClose}>\n              Discard\n            </button>\n            <button style={{ width: 120 }} className=\"btn btn-primary\" onClick={() => setAttention(false)}>\n              Keep Editing\n            </button>\n          </CModalFooter>\n        </CModal>\n\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"12\">\n            <CCardGroup>\n              <CCard className=\"popup--update-user__card--wrapper\">\n                <CCardBody>\n                  <Formik\n                    innerRef={formRef}\n                    enableReinitialize={true}\n                    initialValues={initialValues}\n                    validate={validate(validationSchema)}\n                    onSubmit={onSubmit}\n                  >\n                    {({ values, errors, touched, dirty, handleChange, handleBlur, handleSubmit, isValid }) => (\n                      <CForm onSubmit={handleSubmit}>\n                        <FieldName label=\"Consultation Topic (*)\" width={164}>\n                          <CFormGroup className=\"m-0\">\n                            <CInput\n                              type=\"text\"\n                              placeholder=\"Consultation Topic (*)\"\n                              invalid={\n                                values.diseases_title.trim() !== '' && touched.diseases_title && !!errors.diseases_title\n                              }\n                              maxLength={50}\n                              value={values.diseases_title}\n                              onBlur={handleBlur}\n                              onChange={handleChange}\n                              name=\"diseases_title\"\n                            />\n                            <CInvalidFeedback>{errors.diseases_title}</CInvalidFeedback>\n                          </CFormGroup>\n                        </FieldName>\n                        <FieldName label=\"Category (*)\" width={164}>\n                          <div style={{ width: '100%' }}>\n                            <SelectLoadmore\n                              selected={selectedCategory}\n                              setSelected={setSelectedCategory}\n                              defaultValue=\"Select category\"\n                              value={searchCategoryText}\n                              setValue={setSearchCategoryText}\n                              callbackSearch={getConsultingCategories}\n                              {...categories}\n                              maxLength={50}\n                            />\n                          </div>\n                        </FieldName>\n                        <FieldName label=\"Status (*)\" width={164}>\n                          <CFormGroup className=\"m-0\">\n                            <div className=\"d-flex\">\n                              <CInput\n                                type=\"radio\"\n                                checked={Number(values.status) === 1}\n                                value={1}\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                name=\"status\"\n                              />\n                              Show\n                              <CInput\n                                style={{ marginLeft: 18 }}\n                                type=\"radio\"\n                                checked={Number(values.status) === 0}\n                                value={0}\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                name=\"status\"\n                              />\n                              Hide\n                            </div>\n                          </CFormGroup>\n                        </FieldName>\n                        <FieldName label=\"Priority (*)\" width={164}>\n                          <div className=\"d-flex\">\n                            <CInput\n                              type=\"radio\"\n                              checked={Number(values.priority) === 0}\n                              value={0}\n                              onBlur={handleBlur}\n                              onChange={handleChange}\n                              name=\"priority\"\n                            />\n                            0\n                            <CInput\n                              className=\"ml-5\"\n                              type=\"radio\"\n                              checked={Number(values.priority) === 1}\n                              value={1}\n                              onBlur={handleBlur}\n                              onChange={handleChange}\n                              name=\"priority\"\n                            />\n                            1\n                          </div>\n                        </FieldName>\n                        <FieldName label=\"Description\" width={164}>\n                          <CTextarea\n                            type=\"text\"\n                            placeholder=\"Description\"\n                            maxLength={1000}\n                            value={values.description || ''}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                            name=\"description\"\n                            rows={5}\n                          />\n                        </FieldName>\n                        <CFormGroup className=\"mb-0\">\n                          <CRow>\n                            <CCol xs=\"12\" style={{ textAlign: 'right' }}>\n                              <CButton color=\"secondary\" className=\"px-4 mr-4\" onClick={handleClose}>\n                                Cancel\n                              </CButton>\n                              <CButton\n                                color=\"primary\"\n                                className=\"px-4\"\n                                type=\"submit\"\n                                disabled={\n                                  !selectedCategory ||\n                                  // !thumbnail ||\n                                  !isValid ||\n                                  (!dirty &&\n                                    // thumbnail === initialValues.thumbnail &&\n                                    (selectedCategory?.id || '') === initialValues.group_treatments_id)\n                                }\n                              >\n                                {type === 'create' ? 'Create' : 'Save'}\n                              </CButton>\n                            </CCol>\n                          </CRow>\n                        </CFormGroup>\n                      </CForm>\n                    )}\n                  </Formik>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CModalBody>\n    </CModal>\n  );\n};\n\nexport default ModalDisease;\n","import React, { useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { CDataTable, CButton } from '@coreui/react';\nimport ModalDisease from './ModalDisease';\nimport { ConfirmPopup, SelectLoadmore } from '../../../components';\nimport Search from '../../../components/search/Search';\nimport { SUCCESS } from '../../../store/callApi/actions';\nimport config, { listDiseaseStatus } from '../../../config';\nimport { adminDeleteContent, pagination, renderFields } from '../../../extensions';\nimport { useApi } from 'store/callApi';\n\nconst initialValues = {\n  thumbnail: '',\n  diseases_title: '',\n  group_treatments_id: '',\n  group_treatments_name: '',\n  status: 1,\n  description: '',\n  priority: 0,\n};\n\ntype DiseaseDataType = {\n  id: string;\n  no: number;\n  thumbnail: string;\n  diseases_title: string;\n  group_treatments_name: string;\n  created_date: number;\n  question_number: 0;\n  status: 0 | 1;\n  priority: 0 | 1;\n  description: string;\n};\n\ntype DiseasesDataType = {\n  data: DiseaseDataType[];\n  total: number;\n  page: number;\n  totalPages: number;\n  loading: boolean;\n};\n\nconst pageSize = 10;\n\nconst Diseases: React.FC<RouteComponentProps> = (props) => {\n  const { callApi } = useApi();\n\n  const [diseases, setDiseases] = useState<DiseasesDataType>({\n    data: [],\n    total: 0,\n    page: 1,\n    totalPages: 0,\n    loading: true,\n  });\n  const [modalDisease, setModalDisease] = useState<any>({\n    show: false,\n    initialValues: initialValues,\n    type: 'create',\n  });\n\n  const [status, setStatus] = useState<any>(null);\n  const [searchCategoryText, setSearchCategoryText] = useState('');\n  const [categories, setCategories] = useState<any>({ data: [], loading: true, full: false, page: 1 });\n  const [selectedCategory, setSelectedCategory] = useState<any>(null);\n\n  const [popupDeleteDisease, setPopupDeleteDisease] = useState({ show: false, id: '', name: '' });\n  const [searchName, setSearchName] = useState('');\n\n  const fields = [\n    { key: 'no', _style: { width: '4%' } },\n    { key: 'diseases_title', label: 'Consultation Topic', _style: { width: '15%' } },\n    { key: 'group_treatments_name', label: 'Category', _style: { width: '15%' } },\n    { key: 'description', _style: { width: '15%' } },\n    {\n      key: 'priority',\n      _style: { width: '8%' },\n    },\n    { key: 'created_date', _style: { width: '10%' }, isDate: true },\n    { key: 'question_number', label: 'Number Of Questions', _style: { width: '12%' } },\n    {\n      key: 'status',\n      _style: { width: '12%' },\n      renderContent: (item: DiseaseDataType) => (item.status ? 'Show' : 'Hide'),\n    },\n    {\n      key: 'action',\n      _style: { width: '10%' },\n      renderContent: (item: DiseaseDataType) => (\n        <>\n          <CButton\n            color=\"primary\"\n            variant=\"outline\"\n            shape=\"square\"\n            size=\"sm\"\n            style={{\n              marginRight: 10,\n            }}\n            onClick={() => setPopupDeleteDisease({ show: true, id: item.id, name: item.diseases_title })}\n          >\n            <i className=\"fas fa-trash-alt\"> </i>\n          </CButton>\n          <CButton\n            color=\"primary\"\n            variant=\"outline\"\n            shape=\"square\"\n            size=\"sm\"\n            onClick={() => setModalDisease({ show: true, type: 'update', initialValues: item })}\n          >\n            <i className=\"fas fa-pencil-alt\"> </i>\n          </CButton>\n        </>\n      ),\n    },\n  ];\n\n  /**\n   * handle change page when user click change page\n   * @param newPage new page of diseases\n   */\n  const pageChange = (newPage: number) => {\n    if (diseases.page !== newPage) {\n      getDiseases(newPage, searchName);\n    }\n  };\n\n  /**\n   * get all diseases whenever status or category is changed by filter\n   */\n  useEffect(() => {\n    getDiseases(1, searchName);\n  }, [status, selectedCategory]);\n\n  /**\n   * get all categories when component is mounted\n   */\n  useEffect(() => {\n    getConsultingCategories('', 1);\n  }, []);\n\n  let noItems = <div />;\n\n  if (!diseases.loading) {\n    if (!diseases.total) noItems = <div>No items found!</div>;\n  }\n\n  /**\n   * Call API to get all consulting categories from server\n   * @param categoryName category search keyword from input\n   * @param page page number\n   */\n  const getConsultingCategories = (categoryName: string, page: number) => {\n    callApi(\n      {\n        method: 'get',\n        api: config.rest.adminGetConsultingCategories(page, categoryName),\n      },\n      (response: any) => {\n        const { status, data } = response;\n        if (status === SUCCESS) {\n          setCategories((categories: any) => {\n            const newCates = data.categories.map((item: any) => {\n              return { id: item.id, name: item.title_treatments };\n            });\n            const cates =\n              page === 1 ? (categoryName === '' ? [null, ...newCates] : newCates) : [...categories.data, ...newCates];\n            return { data: cates, loading: false, full: data.categories.length < 10, page: page };\n          });\n        }\n      },\n    );\n  };\n\n  /**\n   * Get All diseases from server follow by page number and search keyword\n   * @param newPage page number\n   * @param searchName search keyword\n   */\n  const getDiseases = (newPage: number, searchName: string) => {\n    setDiseases({ ...diseases, loading: true });\n    callApi(\n      {\n        method: 'get',\n        api: config.rest.adminGetConsultingDiseases(\n          newPage,\n          searchName,\n          selectedCategory ? selectedCategory.id : '',\n          status ? status.id : '',\n        ),\n      },\n      (response: any) => {\n        const { status, data } = response;\n        if (status === SUCCESS) {\n          setDiseases({\n            data: data.diseases.map((item: any, index: number) => {\n              return { ...item, no: index + 1 + pageSize * (newPage - 1) };\n            }),\n            page: newPage,\n            total: data.total,\n            totalPages: Math.ceil(data.total / pageSize),\n            loading: false,\n          });\n        } else {\n          setDiseases((diseases: any) => {\n            return { ...diseases, loading: false };\n          });\n        }\n      },\n    );\n  };\n\n  /**\n   * Close popup, call api confirm password and then delele the selected category\n   * @param id id of selected category\n   * @param password password user typed\n   */\n  const handleDeleteDisease = (id: string) => {\n    setPopupDeleteDisease({ ...popupDeleteDisease, show: false });\n    setDiseases({ ...diseases, loading: true });\n    callApi({ method: 'delete', api: config.rest.adminConsultingDisease(id) }, (response: any) => {\n      const { status } = response;\n      if (status === SUCCESS) {\n        getDiseases(diseases.page, searchName);\n      } else\n        setDiseases((diseases: any) => {\n          return { ...diseases, loading: false };\n        });\n    });\n  };\n\n  return (\n    <div className=\"px-5 mx-3\" style={{ marginTop: 10 }}>\n      <ModalDisease\n        callApi={callApi}\n        {...modalDisease}\n        handleClose={() => setModalDisease({ ...modalDisease, show: false })}\n        searchDiseases={() => getDiseases(diseases.page, searchName)}\n      />\n      <ConfirmPopup\n        isVisible={popupDeleteDisease.show}\n        title=\"Delete Consultation Topic\"\n        renderContent={adminDeleteContent(\n          'Are you sure to delete the topic',\n          popupDeleteDisease.name,\n          'If yes, all questions in this consultation topic are also deleted immediately.',\n        )}\n        leftButtonText=\"Cancel\"\n        rightButtonText=\"Delete\"\n        leftButtonOnPress={() => setPopupDeleteDisease({ ...popupDeleteDisease, show: false })}\n        rightButtonOnPress={() => handleDeleteDisease(popupDeleteDisease.id)}\n      />\n      <div>\n        <h2>Consultation Topics Management</h2>\n        <div className=\"d-flex align-items-center justify-content-between mt-4\" style={{ marginBottom: '2.4rem' }}>\n          <div className=\"d-flex\">\n            <div style={{ width: 250 }}>\n              <Search\n                className=\"mr-3\"\n                searchName={searchName}\n                setSearchName={setSearchName}\n                searchEmpty={true}\n                callbackSearch={(searchName: string) => getDiseases(1, searchName)}\n              />\n            </div>\n            {/* <div style={{ width: 250 }}>\n              <SelectLoadmore\n                className=\"mr-3\"\n                selected={selectedCategory}\n                setSelected={setSelectedCategory}\n                defaultValue=\"Select category\"\n                value={searchCategoryText}\n                setValue={setSearchCategoryText}\n                callbackSearch={getConsultingCategories}\n                {...categories}\n                maxLength={50}\n              />\n            </div> */}\n            <div style={{ width: 250 }}>\n              <SelectLoadmore\n                className=\"mr-3\"\n                selected={status}\n                setSelected={setStatus}\n                defaultValue=\"Select status\"\n                data={listDiseaseStatus}\n                loading={false}\n                full={true}\n                value={status ? status.name : ''}\n              />\n            </div>\n          </div>\n          <CButton color=\"primary\" onClick={() => setModalDisease({ type: 'create', show: true, initialValues })}>\n            Create new topic\n          </CButton>\n        </div>\n      </div>\n      <div className=\"hb-table\">\n        <CDataTable\n          items={diseases.data}\n          fields={fields}\n          loading={diseases.loading}\n          noItemsViewSlot={noItems}\n          hover\n          striped\n          scopedSlots={renderFields(fields)}\n        />\n      </div>\n      {pagination(diseases.totalPages, diseases.page, pageChange, diseases.total)}\n    </div>\n  );\n};\n\nexport default Diseases;\n","import React from 'react';\n\ninterface Props {\n  className?: string;\n  centered?: boolean;\n  label: string;\n  width?: number;\n  style?: any;\n}\n\nconst FieldName: React.FC<Props> = (props) => {\n  let { className, label, children, width, centered, style } = props;\n  width = width || 110;\n\n  return (\n    <div className={`d-flex mb-3 ${centered ? 'align-items-center' : ''} ${className || ''}`} style={style}>\n      <div style={{ minWidth: width, marginTop: 6 }}>{label}</div>\n      <div style={{ width: `calc(100% - ${width}px)` }}>{children}</div>\n    </div>\n  );\n};\n\nexport default FieldName;\n"],"sourceRoot":""}