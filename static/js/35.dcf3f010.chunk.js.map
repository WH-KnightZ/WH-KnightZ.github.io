{"version":3,"sources":["views/user/payment/InformationProduct.tsx","views/user/payment/PaymentWrapper.tsx","views/user/payment/CardItem.tsx","views/user/payment/Credit.tsx","views/user/payment/SEPA.tsx","views/user/payment/Subscriptions.tsx"],"names":["InformationProduct","props","promotionCode","product","className","useState","promote","setPromote","isPromoted","setIsPromoted","countTotalPriceProduct","reduce","total","item","price","toFixed","map","productName","renderProductName","index","renderProductItem","HBInput","onChange","e","target","value","placeholder","name","onBlur","autoFocus","onClick","PaymentWrapper","handleSubmit","children","onSubmit","CardItem","options","typeCard","label","onReady","onForcus","disable","Component","diable","Credit","fullName","emailUser","disableNumber","setDisableNumber","disableDate","setDisableDate","disableCVC","setDisableCVC","disableEmail","setDisableEmail","disableName","setDisableName","isCredit","setName","email","setEmail","optiosCredit","useMemo","style","base","fontSize","color","fontWeight","letterSpacing","invalid","creditItem","id","type","autoComplete","complete","CardNumberElement","CardExpiryElement","CardCvcElement","newItem","md","SEPA","disableSEPA","setDisableSEPA","optios","supportedCountries","placeholderCountry","iban","console","log","IbanElement","Subscriptions","firstName","useSelector","state","auth","first_name","lastName","last_name","stripePayment","stripe_payment","dispatch","useDispatch","callApi","useApi","history","useHistory","stripe","useStripe","elements","useElements","tabIndex","setTabIndex","processing","setProcessing","show","content","status","confirmPopup","setConfirmPopup","url","iframe","setIframe","clientSecret","setClientSet","setDiableEmail","subscriptionsId","setSubscriptionsId","checkIsPayment","customerId","subscriptionId","productId","priceId","subscriptionStatus","paymentIntentStatus","data","some","product_id","updataPaymentStatus","createPaymentStatus","handleSubmitCard","event","a","preventDefault","createPaymentMethod","card","getElement","billing_details","then","result","createCustomer","paymentMethod","payload","handleSubmitIban","sepa_debit","paymentMethodDeafault","customerName","qs","stringify","payment_method","metaDataCustomer","method","headers","Authorization","config","app","authenSecretKey","axios","response","subscriptionProduct","catch","error","message","customer","expand","metaDataProduct","latest_invoice","payment_intent","action","next_action","client_secret","use_stripe_sdk","stripe_js","last_payment_error","cardType","CARD_TYPES","CARD","confirmCredit","customer_email","confirmSEPA","plan","confirmSepaDebitPayment","confirmCardPayment","customer_id","subscription_id","price_id","subscription_status","payment_intent_status","dataStripe","api","rest","payment","body","SUCCESS","push","addStripe","subscription","expired_date","paid_date","payment_app_status","on3DSComplete","handleCloseIframeCallBack","retrievePaymentIntent","paymentIntent","subsId","metaData","getSubscriptionById","iframeCallBack","ev","useEffect","window","addEventListener","removeEventListener","mappingCard","param","text","SEPA_DEBIT","setCardType","mappedCard","closeOnBackdrop","onClose","size","title","width","height","src","border","up","upCallback","hideCloseBtn","background","goBack","selectedIndex","onSelect","disabled"],"mappings":"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","file":"static/js/35.dcf3f010.chunk.js","sourcesContent":["import { HBButtonFull } from 'hbBaseClass';\nimport HBInput from 'hbBaseClass/hbInput/HBInput';\nimport React from 'react';\nimport { useState } from 'react';\nimport './InformationProduct.scss';\n\ninterface Props {\n  product?: {\n    price: number;\n    productName?: string;\n  }[];\n  promotionCode?: string;\n  className?: string;\n}\n\nconst InformationProduct: React.FC<Props> = (props) => {\n  const { promotionCode, className, product } = props;\n  const [promote, setPromote] = useState(promotionCode);\n  const [isPromoted, setIsPromoted] = useState(false);\n\n  /**\n   * handle change input coupon promotion\n   * @param e\n   * @returns\n   */\n  const handleChange = (e: any) => setPromote(e.target.value);\n\n  /**\n   *\n   * @param e\n   * handle event blur of input\n   */\n  const handleBlur = (e: any) => {\n    if (promote) setIsPromoted(true);\n    else setIsPromoted(false);\n  };\n\n  /**\n   * handle click input\n   * @param e\n   */\n  const handleClick = (e: any) => {\n    setIsPromoted(true);\n  };\n\n  /**\n   * render name of product\n   * @param product\n   */\n  const renderProductName = (product: any) => {\n    return product.map((item: any) => item.productName);\n  };\n\n  /**\n   * render product Item\n   * @param product\n   */\n  const renderProductItem = (product: any) => {\n    return product.map((item: any, index: number) => (\n      <div className=\"InformationProduct-prices\" key={index}>\n        <div className=\"InformationProduct-prices__label\">\n          {item.productName}\n          <p>Billed monthly</p>\n        </div>\n        <div className=\"InformationProduct-prices__itemPrice\">€{item.price?.toFixed(2)}</div>\n      </div>\n    ));\n  };\n\n  /**\n   * caculator total price product\n   * @param product\n   */\n  const countTotalPriceProduct = (product: any) => {\n    return product.reduce((total: any, item: any) => (total += item.price), 0).toFixed(2);\n  };\n\n  return (\n    <div className=\"InformationProduct-wrapper\">\n      <div className=\"InformationProduct-header\">\n        {`Subcribe to ${renderProductName(product)} `}\n        <div className=\"InformationProduct-header__wrapper\">\n          <span className=\"InformationProduct-header__price\">€{countTotalPriceProduct(product)}</span>\n          <div className=\"InformationProduct-header__recuring\">\n            <span>per</span>\n            <span>month</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"InformationProduct-body\">\n        <h3>Content</h3>\n\n        <div>\n          {renderProductItem(product)}\n\n          <div className=\"InformationProduct-prices\">\n            <div className=\"InformationProduct-prices__label\">Subtotal</div>\n            <div className=\"InformationProduct-prices__itemPrice\">€{countTotalPriceProduct(product)}</div>\n          </div>\n\n          <div className=\"InformationProduct-coupon\">\n            {!isPromoted ? (\n              <div className=\"InformationProduct-coupon__btn\">\n                <HBButtonFull onClick={handleClick}> Add Promotion code </HBButtonFull>\n              </div>\n            ) : (\n              <HBInput\n                onChange={handleChange}\n                placeholder=\"Add promotion code\"\n                value={promote}\n                name=\"promote\"\n                onBlur={handleBlur}\n                className=\"InformationProduct-coupon__input\"\n                autoFocus\n              />\n            )}\n          </div>\n\n          <div className=\"InformationProduct-total\">\n            <div>Total due today</div>\n            <div className=\"InformationProduct-total__value\">€{countTotalPriceProduct(product)}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InformationProduct;\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router';\n\ninterface Props {\n  handleSubmit: any;\n  children?: any;\n}\n\nconst PaymentWrapper: React.FC<Props> = (props) => {\n  const { handleSubmit, children } = props;\n\n  return <form onSubmit={handleSubmit}>{children}</form>;\n};\n\nexport default PaymentWrapper;\n","import React from 'react';\nimport HBInput from '../../../hbBaseClass/hbInput/HBInput';\n\ninterface Props {\n  options: any;\n  typeCard: any;\n  onReady: () => void;\n  onChange: () => void;\n  onBlur: () => void;\n  onForcus: () => void;\n  label: string;\n  placeholder: any;\n  value: any;\n  disable?: any;\n}\n\nconst CardItem: React.FC<Props> = (props) => {\n  const { options, typeCard, onReady, onBlur, onChange, onForcus, label, placeholder, value, disable } = props;\n  let Component: any = typeCard;\n\n  return (\n    <>\n      <label className=\"CreditCard-tabsPanelItems__label\">{label}</label>\n      <Component {...props} className=\"hb-input-credit\" placeholder={placeholder} value={value} diable={disable} />\n    </>\n  );\n};\n\nexport default CardItem;\n","import React, { useMemo, useState } from 'react';\nimport HBInput from 'hbBaseClass/hbInput/HBInput';\nimport { CardNumberElement, CardCvcElement, CardExpiryElement } from '@stripe/react-stripe-js';\nimport CardItem from './CardItem';\nimport { CCol, CRow } from '@coreui/react';\n\ninterface Props {\n  onClick?: any;\n  fullName: string;\n  emailUser: string;\n  className?: string;\n  disableNumber?: boolean;\n  setDisableNumber?: any;\n  disableDate?: boolean;\n  setDisableDate?: any;\n  disableCVC?: boolean;\n  setDisableCVC?: any;\n  disableEmail?: boolean;\n  setDisableEmail?: any;\n  disableName?: boolean;\n  setDisableName?: any;\n  isCredit?: string;\n}\n\nconst useOptionsCredit = () => {\n  const options = useMemo(\n    () => ({\n      style: {\n        base: {\n          fontSize: '13px',\n          color: ' #005F71',\n          fontWeight: '500',\n          letterSpacing: '0.025em',\n          '::placeholder': {\n            color: ' #abafbf',\n          },\n        },\n        invalid: {\n          color: '#9e2146',\n        },\n      },\n    }),\n    [],\n  );\n\n  return options;\n};\n\nconst Credit: React.FC<Props> = (props) => {\n  const {\n    fullName,\n    emailUser,\n    className,\n    disableNumber,\n    setDisableNumber,\n    disableDate,\n    setDisableDate,\n    disableCVC,\n    setDisableCVC,\n    disableEmail,\n    setDisableEmail,\n    disableName,\n    setDisableName,\n    isCredit,\n  } = props;\n  const [name, setName] = useState(fullName);\n  const [email, setEmail] = useState(emailUser);\n  const optiosCredit = useOptionsCredit();\n\n  const creditItem = [\n    {\n      id: 1,\n      onChange: (e: any) => {\n        if (!e.target.value) {\n          setDisableName(true);\n          setName('');\n        } else {\n          setName(e.target.value);\n          setDisableName(false);\n        }\n      },\n      type: 'text',\n      placeholder: 'Vorname Nachname',\n      autoComplete: 'name',\n      name: 'name',\n      value: name,\n      label: 'Vollständiger Name des Inhabers',\n      typeCard: HBInput,\n    },\n    {\n      id: 2,\n      onChange: (e: any) => {\n        if (!e.target.value) {\n          setDisableEmail(true);\n          setEmail('');\n        } else {\n          setEmail(e.target.value);\n          setDisableEmail(false);\n        }\n      },\n      type: 'text',\n      placeholder: 'E-Mail',\n      autoComplete: 'email',\n      name: 'email',\n      value: email,\n      label: 'E-Mail',\n      typeCard: HBInput,\n    },\n    {\n      id: 3,\n      onChange: (e: any) => {\n        e.complete ? setDisableNumber(false) : setDisableNumber(true);\n      },\n      label: 'Kreditkartennummer',\n      typeCard: CardNumberElement,\n    },\n    {\n      id: 4,\n      onChange: (e: any) => {\n        e.complete ? setDisableDate(false) : setDisableDate(true);\n      },\n      label: 'Gültig bis',\n      typeCard: CardExpiryElement,\n    },\n    {\n      id: 5,\n      onChange: (e: any) => {\n        e.complete ? setDisableCVC(false) : setDisableCVC(true);\n      },\n      label: 'CVV',\n      typeCard: CardCvcElement,\n    },\n  ];\n\n  return (\n    <div className={className}>\n      <CRow className=\"p-0\">\n        {creditItem.map((item: any) => {\n          let newItem = { ...item, options: optiosCredit };\n          return (\n            <CCol md={12} key={newItem.id}>\n              <CardItem\n                {...newItem}\n                placeholder={newItem.placeholder}\n                disable={!(disableNumber || disableDate || disableCVC || disableEmail || disableName)}\n              />\n            </CCol>\n          );\n        })}\n      </CRow>\n    </div>\n  );\n};\n\nexport default Credit;\n","import React, { useMemo, useState } from 'react';\nimport HBInput from 'hbBaseClass/hbInput/HBInput';\nimport { IbanElement } from '@stripe/react-stripe-js';\nimport CardItem from './CardItem';\nimport { CCol, CRow } from '@coreui/react';\n\ninterface Props {\n  onClick?: any;\n  fullName: string;\n  emailUser: string;\n  className?: string;\n  disableSEPA?: boolean;\n  setDisableSEPA?: any;\n  disableEmail?: boolean;\n  setDisableEmail?: any;\n  disableName?: boolean;\n  setDisableName?: any;\n}\n\n/**\n * custom style IBAN\n * @returns option style of IBAN\n */\nconst useOptions = () => {\n  const options = useMemo(\n    () => ({\n      supportedCountries: ['SEPA'],\n      style: {\n        base: {\n          fontSize: '13px',\n          color: ' #005F71',\n          fontWeight: '500',\n          letterSpacing: '0.025em',\n          '::placeholder': {\n            color: ' #abafbf',\n          },\n          placeholderCountry: 'DE',\n        },\n        invalid: {\n          color: '#9e2146',\n        },\n      },\n    }),\n    [],\n  );\n\n  return options;\n};\n\nconst SEPA: React.FC<Props> = (props) => {\n  const {\n    onClick,\n    fullName,\n    emailUser,\n    className,\n    children,\n    disableSEPA,\n    setDisableSEPA,\n    disableEmail,\n    setDisableEmail,\n    disableName,\n    setDisableName,\n  } = props;\n  const [name, setName] = useState(fullName);\n  const [email, setEmail] = useState(emailUser);\n  const optios = useOptions();\n\n  const iban = [\n    {\n      id: 1,\n      onChange: (e: any) => {\n        if (!e.target.value) {\n          setDisableName(true);\n          setName('');\n        } else {\n          setName(e.target.value);\n          setDisableName(false);\n        }\n      },\n      type: 'text',\n      placeholder: 'Vorname Nachname',\n      autoComplete: 'name',\n      name: 'name',\n      value: name,\n      label: 'Vollständiger Name des Inhabers',\n      typeCard: HBInput,\n    },\n    {\n      id: 2,\n      onChange: (e: any) => {\n        if (!e.target.value) {\n          setDisableEmail(true);\n          setEmail('');\n        } else {\n          setEmail(e.target.value);\n          setDisableEmail(false);\n        }\n      },\n      type: 'text',\n      placeholder: 'E-Mail',\n      autoComplete: 'email',\n      name: 'email',\n      value: email,\n      label: 'E-Mail',\n      typeCard: HBInput,\n    },\n    {\n      id: 3,\n      onChange: (e: any) => {\n        e.complete ? setDisableSEPA(false) : setDisableSEPA(true);\n      },\n      onReady: () => console.log('234'),\n      label: 'IBAN eingeben',\n      typeCard: IbanElement,\n    },\n  ];\n\n  return (\n    <div className={className}>\n      <CRow className=\"p-0\">\n        {iban.map((item: any) => {\n          let newItem = { ...item, options: optios };\n          return (\n            <CCol md={12} key={newItem.id}>\n              <CardItem {...newItem} disable={!(disableEmail || disableName || disableSEPA)} />\n            </CCol>\n          );\n        })}\n      </CRow>\n    </div>\n  );\n};\n\nexport default SEPA;\n","import { CCol, CRow, CSpinner } from '@coreui/react';\nimport { HBButtonFull, HBButtonSmall, HBModalConfirm, HBModal } from 'hbBaseClass';\nimport React, { useState } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport InformationProduct from './InformationProduct';\nimport PaymentWrapper from './PaymentWrapper';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport { useElements, useStripe, CardNumberElement, IbanElement } from '@stripe/react-stripe-js';\nimport Credit from './Credit';\nimport SEPA from './SEPA';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CARD_TYPES } from 'configs/constants';\nimport { useHistory } from 'react-router-dom';\nimport './Subscription.scss';\nimport './Payment.scss';\nimport axios from 'axios';\nimport { useEffect } from 'react';\nimport qs from 'qs';\nimport config from 'config';\nimport { SUCCESS, useApi } from 'store/callApi';\nimport { addStripe } from 'store/auth/actions';\n\nconst Subscriptions: React.FC<RouteComponentProps> = (props) => {\n  const firstName = useSelector((state: any) => state.auth.first_name);\n  const lastName = useSelector((state: any) => state.auth.last_name);\n  const emailUser = useSelector((state: any) => state.auth.email);\n  const stripePayment = useSelector((state: any) => state.auth.stripe_payment);\n  let fullName = firstName + ' ' + lastName;\n\n  const dispatch = useDispatch();\n  const { callApi } = useApi();\n  const history = useHistory();\n  const stripe: any = useStripe();\n  const elements: any = useElements();\n  const [tabIndex, setTabIndex] = useState(0);\n  const [processing, setProcessing] = useState(false);\n  const [confirmPopup, setConfirmPopup] = useState({ show: false, content: '', status: '' });\n  const [iframe, setIframe] = useState({\n    show: false,\n    url: '',\n  });\n  const [clientSecret, setClientSet] = useState('');\n  const [disableName, setDisableName] = useState(fullName ? false : true);\n  const [disableEmail, setDiableEmail] = useState(emailUser ? false : true);\n  const [disableNumber, setDisableNumber] = useState(true);\n  const [disableDate, setDisableDate] = useState(true);\n  const [disableCVC, setDisableCVC] = useState(true);\n  const [disableSEPA, setDisableSEPA] = useState(true);\n  const [subscriptionsId, setSubscriptionsId] = useState('');\n\n  /**\n   *\n   * check payment\n   * @param customerId\n   * @param subscriptionId\n   * @param productId\n   * @param priceId\n   * @param subscriptionStatus\n   * @param paymentIntentStatus\n   * @param data\n   */\n  const checkIsPayment = (\n    customerId: string,\n    subscriptionId: string,\n    productId: string,\n    priceId: string,\n    subscriptionStatus: string,\n    paymentIntentStatus: string,\n    data: { method: 'stripe'; subscription: { dataStripe: any } },\n  ) => {\n    const is_stripePayment = stripePayment?.some((item: any) => item.product_id === 'prod_JoXW23PIXK9Q8j');\n    if (is_stripePayment) {\n      updataPaymentStatus(customerId, subscriptionId, productId, priceId, subscriptionStatus, paymentIntentStatus);\n    } else {\n      createPaymentStatus(data);\n    }\n  };\n\n  const handleSubmitCard = async (event: any) => {\n    event.preventDefault();\n    setProcessing(true);\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const payload = await stripe\n      .createPaymentMethod({\n        type: 'card',\n        card: elements.getElement(CardNumberElement),\n        billing_details: {\n          name: event.target.name.value,\n          email: event.target.email.value,\n        },\n      })\n      .then((result: any) => {\n        setProcessing(true);\n        createCustomer(result.paymentMethod.id, result.paymentMethod.billing_details.name);\n      });\n\n    console.log('[PaymentMethod]', payload);\n  };\n\n  const handleSubmitIban = async (event: any) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const payload = await stripe\n      .createPaymentMethod({\n        type: 'sepa_debit',\n        sepa_debit: elements.getElement(IbanElement),\n        billing_details: {\n          name: event.target.name.value,\n          email: event.target.email.value,\n        },\n      })\n      .then(function (result: any) {\n        // Handle result.error or result.paymentIntent\n\n        setProcessing(true);\n        createCustomer(result.paymentMethod.id, result.paymentMethod.billing_details.name);\n      });\n    console.log('[PaymentMethod]', payload);\n  };\n\n  /**\n   *\n   * @param paymentMethodDeafault\n   */\n  const createCustomer = async (paymentMethodDeafault: any, customerName: string) => {\n    const data = qs.stringify({\n      email: emailUser,\n      'invoice_settings[default_payment_method]': paymentMethodDeafault,\n      payment_method: paymentMethodDeafault,\n    });\n    const metaDataCustomer: any = {\n      method: 'post',\n      url: 'https://api.stripe.com/v1/customers',\n      headers: {\n        Authorization: config.app.authenSecretKey,\n      },\n      data: data,\n    };\n\n    return await axios(metaDataCustomer)\n      .then(function (response) {\n        setProcessing(true);\n        subscriptionProduct(response.data.id, customerName);\n      })\n      .catch(function (error) {\n        // if ()\n        setConfirmPopup({ show: true, content: error.response.data.error.message, status: 'error' });\n      });\n  };\n\n  /**\n   * create subscripstion to pay product\n   * @param customerId\n   */\n  const subscriptionProduct = async (customerId: any, customerName: string) => {\n    const data = qs.stringify({\n      'items[0][price]': 'price_1JAuRXKzetBOhA7Kqsdd0ASw',\n      customer: customerId,\n      // payment_behavior: 'default_incomplete',\n      expand: ['latest_invoice.payment_intent', 'latest_invoice.customer'],\n    });\n    const metaDataProduct: any = {\n      method: 'post',\n      url: 'https://api.stripe.com/v1/subscriptions',\n      headers: {\n        Authorization: config.app.authenSecretKey,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      data: data,\n    };\n\n    return await axios(metaDataProduct)\n      .then(function (response) {\n        const status = response.data.latest_invoice.payment_intent.status;\n        const action = response.data.latest_invoice.payment_intent.next_action;\n        if (response.data.status === 'incomplete') {\n          setProcessing(true);\n          if (status === 'requires_action') {\n            if (action && action.type === 'use_stripe_sdk') {\n              setClientSet(response.data.latest_invoice.payment_intent.client_secret);\n              setIframe({\n                ...iframe,\n                show: true,\n                url: action?.use_stripe_sdk.stripe_js,\n              });\n              setSubscriptionsId(response.data.id);\n              setProcessing(true);\n            }\n          } else if (status === 'requires_payment_method') {\n            setConfirmPopup({\n              show: true,\n              content: response.data.latest_invoice.payment_intent.last_payment_error.message,\n              status: status,\n            });\n          } else if (status === 'requires_confirmation') {\n            if (cardType === CARD_TYPES.CARD) {\n              confirmCredit(\n                response.data.latest_invoice.payment_intent.client_secret,\n                response.data.latest_invoice.customer_email,\n                customerName,\n              );\n            } else {\n              confirmSEPA(\n                response.data.latest_invoice.payment_intent.client_secret,\n                response.data.latest_invoice.customer_email,\n                customerName,\n              );\n            }\n          } else {\n            setConfirmPopup({ show: true, content: 'Zahlungserfolg', status: status });\n          }\n        } else if (response.data.status === 'active') {\n          checkIsPayment(\n            customerId,\n            response.data.id,\n            response.data.plan.product,\n            'price_1JAuRXKzetBOhA7Kqsdd0ASw',\n            response.data.status,\n            response.data.latest_invoice.payment_intent.status,\n            response.data,\n          );\n          setProcessing(false);\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  const confirmSEPA = async (clientSecret: any, email: string, customerName: string) => {\n    return await stripe\n      .confirmSepaDebitPayment(clientSecret, {\n        payment_method: {\n          sepa_debit: elements.getElement(IbanElement),\n          billing_details: {\n            name: customerName,\n            email: email,\n          },\n        },\n      })\n      .then(function (result: any) {\n        //Handle result.error or result.paymentIntent\n        // if(result.error) {\n        // }\n        //  if(result.paymentIntent) {\n        // }\n      });\n  };\n\n  const confirmCredit = (clientSecret: any, email: string, customerName: string) => {\n    stripe\n      .confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardNumberElement),\n          billing_details: {\n            name: customerName,\n            email: email,\n          },\n        },\n      })\n      .then(function (result: any) {\n        // Handle result.error or result.paymentIntent\n      });\n  };\n\n  /**\n   * update payment\n   * @param customer_id\n   * @param subscription_id\n   * @param product_id\n   * @param price_id\n   * @param subscription_status\n   * @param payment_intent_status\n   */\n  const updataPaymentStatus = (\n    customer_id: string,\n    subscription_id: string,\n    product_id: string,\n    price_id: string,\n    subscription_status: string,\n    payment_intent_status: string,\n  ) => {\n    const dataStripe = {\n      method: 'stripe',\n      customer_id: customer_id,\n      subscription_id: subscription_id,\n      product_id: product_id,\n      price_id: price_id,\n      subscription_status: subscription_status,\n      payment_intent_status: payment_intent_status,\n    };\n    callApi(\n      {\n        method: 'put',\n        api: config.rest.payment(),\n        body: dataStripe,\n      },\n      (response: any) => {\n        const { status } = response;\n        if (status === SUCCESS) {\n          setConfirmPopup({ show: true, content: 'Zahlungserfolg', status: 'active' });\n          history.push('/mobility');\n          dispatch(addStripe(dataStripe));\n        }\n      },\n    );\n  };\n\n  /**\n   *\n   * create payment\n   * @param payment\n   */\n  const createPaymentStatus = (payment: any) => {\n    const dataStripe = {\n      method: 'stripe',\n      subscription: { ...payment },\n    };\n    callApi(\n      {\n        method: 'post',\n        api: config.rest.payment(),\n        body: dataStripe,\n      },\n      (response: any) => {\n        const { status } = response;\n        if (status === SUCCESS) {\n          const payload = {\n            expired_date: null,\n            subscription_status: payment.status,\n            paid_date: null,\n            customer_id: payment.customer,\n            payment_intent_status: payment?.latest_invoice.payment_intent.status,\n            payment_app_status: '',\n            subscription_id: payment.id,\n            method: 'stripe',\n            price_id: payment.plan.id,\n            product_id: payment.plan.product,\n          };\n          setConfirmPopup({ show: true, content: 'Zahlungserfolg', status: 'active' });\n          history.push('/mobility');\n          dispatch(addStripe(payload));\n        }\n      },\n    );\n  };\n\n  const getSubscriptionById = (subsId: string) => {\n    const metaData: any = {\n      method: 'get',\n      url: `https://api.stripe.com/v1/subscriptions/${subsId}`,\n      headers: {\n        Authorization: config.app.authenSecretKey,\n      },\n    };\n\n    axios(metaData)\n      .then(function (response) {\n        //console.log(JSON.stringify(response.data));\n        checkIsPayment(\n          response.data.customer,\n          response.data.id,\n          response.data.plan.product,\n          response.data.plan.id,\n          response.data.status,\n          'success',\n          response.data,\n        );\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  /**\n   * complete 3DS\n   */\n  const on3DSComplete = () => {\n    // Hide the 3DS UI\n    handleCloseIframeCallBack();\n    // Check the PaymentIntent\n    stripe.retrievePaymentIntent(clientSecret).then(function (result: any) {\n      console.log(result.paymentIntent);\n      if (result.error) {\n        // PaymentIntent client secret was invalid\n        console.log(result.error);\n      } else {\n        if (result.paymentIntent.status === 'succeeded') {\n          // Show your customer that the payment has succeeded\n          //updataPaymentStatus(result.paymentIntent.id,result.paymentIntent.status,);\n          getSubscriptionById(subscriptionsId);\n        } else if (result.paymentIntent.status === 'requires_payment_method') {\n          // Authentication failed, prompt the customer to enter another payment method\n          setConfirmPopup({\n            show: true,\n            content: 'Please enter another payment method',\n            status: 'requires_payment_method',\n          });\n        }\n      }\n    });\n  };\n\n  const iframeCallBack = (ev: any) => {\n    if (ev.data.type === 'stripe-3ds-result') {\n      on3DSComplete();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('message', iframeCallBack, false);\n    return () => {\n      window.removeEventListener('message', iframeCallBack, false);\n    };\n  }, [clientSecret, subscriptionsId]);\n\n  const mappingCard = {\n    [CARD_TYPES.CARD]: { param: 'card', text: 'Kreditkarte hinzufügen', handleSubmit: handleSubmitCard },\n    [CARD_TYPES.SEPA_DEBIT]: { param: 'sepa_debit', text: 'SEPA Lastschrift', handleSubmit: handleSubmitIban },\n  };\n\n  const [cardType, setCardType] = useState(CARD_TYPES.CARD);\n  const mappedCard = mappingCard[cardType];\n\n  /**\n   * handle close popup\n   */\n  const handleClose = () => {\n    setConfirmPopup({ ...confirmPopup, show: false });\n    setProcessing(false);\n  };\n\n  /**\n   * handle close iframe\n   */\n  const handleCloseIframeCallBack = () => {\n    setIframe({ ...iframe, show: false });\n    // setConfirmPopup({ show: true, content: 'SUCCESS', status: 'success' });\n  };\n\n  return (\n    <>\n      <HBModal show={iframe.show} closeOnBackdrop={false} onClose={handleCloseIframeCallBack} size=\"lg\">\n        <iframe key={iframe.url} title=\"\" width={'100%'} height={700} src={iframe.url} style={{ border: 'none' }} />\n      </HBModal>\n      <div className=\"violet\">\n        <HBModalConfirm\n          show={confirmPopup.show}\n          title=\"Zahlung\"\n          content={confirmPopup.content}\n          up=\"Zustimmen\"\n          upCallback={() => (confirmPopup.status === 'succeeded' ? history.push('/mobility') : handleClose())}\n          hideCloseBtn\n        />\n      </div>\n      <div className=\"Subscriptions-wrapper\">\n        <CRow>\n          <CCol\n            md={6}\n            className=\"Subscriptions-contentLeft\"\n            style={{ height: '80vh', background: 'var(--nightblue-20)' }}\n          >\n            <div className=\"hb-mx-20 \">\n              <div className=\"d-flex justify-content-between hb-my-28\">\n                <HBButtonSmall onClick={() => history.goBack()}>\n                  <i className=\"hb-icon-arrow-left hb-icon-md\" /> Zurück\n                </HBButtonSmall>\n              </div>\n            </div>\n            <InformationProduct product={[{ productName: 'Mobility', price: 50 }]} />\n          </CCol>\n          <CCol\n            md={6}\n            className=\"Subscriptions-contentRight\"\n            style={{ height: '80vh', background: 'var(--nightblue-10)' }}\n          >\n            <PaymentWrapper handleSubmit={mappedCard.handleSubmit}>\n              <Tabs selectedIndex={tabIndex} onSelect={(index) => setTabIndex(index)}>\n                <TabList className=\"CreditCard-tabslist\">\n                  <Tab className=\"CreditCard-tabsItem\">\n                    <div\n                      className=\"CreditCard-tabstitle\"\n                      onClick={() => {\n                        setCardType(CARD_TYPES.CARD);\n                        console.log('CARD');\n                      }}\n                    >\n                      Kreditkarte\n                    </div>\n                  </Tab>\n                  <Tab className=\"CreditCard-tabsItem\">\n                    <div\n                      className=\"CreditCard-tabstitle\"\n                      onClick={() => {\n                        setCardType(CARD_TYPES.SEPA_DEBIT);\n                        console.log('SEPA');\n                      }}\n                    >\n                      SEPA\n                    </div>\n                  </Tab>\n                </TabList>\n\n                <TabPanel className=\"CreditCard-tabs-panel\">\n                  <Credit\n                    fullName={fullName}\n                    emailUser={emailUser}\n                    className=\"CreditCard-tabsPanelItems\"\n                    disableName={disableName}\n                    disableEmail={disableEmail}\n                    disableCVC={disableCVC}\n                    disableNumber={disableNumber}\n                    disableDate={disableDate}\n                    setDisableName={setDisableName}\n                    setDisableEmail={setDiableEmail}\n                    setDisableNumber={setDisableNumber}\n                    setDisableDate={setDisableDate}\n                    setDisableCVC={setDisableCVC}\n                    isCredit={CARD_TYPES.CARD}\n                  />\n                </TabPanel>\n\n                <TabPanel className=\"CreditCard-tabs-panel\">\n                  <SEPA\n                    className=\"CreditCard-tabsPanelItems\"\n                    fullName={fullName}\n                    emailUser={emailUser}\n                    disableName={disableName}\n                    disableEmail={disableEmail}\n                    disableSEPA={disableSEPA}\n                    setDisableName={setDisableName}\n                    setDisableEmail={setDiableEmail}\n                    setDisableSEPA={setDisableSEPA}\n                  />\n                </TabPanel>\n              </Tabs>\n\n              <div className=\"CreditCard-btnSubmit\">\n                <HBButtonFull\n                  color=\"violet\"\n                  children={processing ? <CSpinner color=\"light\" size=\"small\" /> : 'Weiter'}\n                  type=\"submit\"\n                  disabled={\n                    cardType === CARD_TYPES.CARD\n                      ? disableName || disableEmail || disableCVC || disableNumber || disableDate\n                      : disableName || disableEmail || disableSEPA\n                  }\n                />\n              </div>\n            </PaymentWrapper>\n          </CCol>\n        </CRow>\n      </div>\n    </>\n  );\n};\n\nexport default Subscriptions;\n"],"sourceRoot":""}