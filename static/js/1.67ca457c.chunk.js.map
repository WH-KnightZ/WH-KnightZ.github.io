{"version":3,"sources":["utilities/datetime.ts","utilities/auth.ts","utilities/format.ts","utilities/validate.ts","utilities/request.ts","components/screens/user/consulting/allAppointments/CategoryItem.tsx","components/menu/MenuOptions.tsx","components/screens/user/consulting/allAppointments/AppointmentTagInfo.tsx","components/screens/user/consulting/allAppointments/RequestAppointment.tsx","components/screens/user/consulting/allAppointments/AcceptedAppointment.tsx","components/screens/user/consulting/allAppointments/FinishedAppointment.tsx","components/screens/user/consulting/allAppointments/CancelledAppointment.tsx","components/screens/user/consulting/allAppointments/AppointmentItem.tsx","components/screens/user/consulting/allAppointments/DialogAcceptAppointment.tsx","components/screens/user/consulting/bookAppointment/AppointmentBtnConfirm.tsx","components/screens/user/consulting/bookAppointment/QuestionItem.tsx","components/screens/user/consulting/ConsultingCategoryItem.tsx","components/screens/user/consulting/NurseCourse.tsx","components/screens/user/consulting/SetSchedule.tsx","components/screens/index.tsx","store/auth/hooks.ts","components/dialog/Dialog.tsx","components/dialog/DialogTextArea.tsx"],"names":["getScheduleTimeOptions","currentTime","options","maxTime","MAX_SCHEDULE_TIME","validTimes","listHours","filter","timeItem","map","value","label","getScheduleTimeStart","defaultTime","timeStart","moment","add","format","find","getScheduleMinTimeEnd","additionalHours","mmTimeStart","MAX_SCHEDULE_TIME_START","getDefaultTimeEnd","USER","AUTH_TYPES","getAuthGroupName","NURSE","ASSISTANT","store","getState","auth","group_name","isRoleUser","pluralize","word","suffixPlural","pluralizeExcercise","validateBookAppointmentAnswers","questions","answers","every","questionItem","questionId","id","required","question_type","qAnswers","answerValues","reduce","acc","answerItem","answer_title","answer","parentQuestionId","QUESTION_TYPES","YES_NO","RADIO","includes","TEXTBOX","length","MAX_QA_INPUT_LENGTH","MAX_SUB_QA_INPUT_LENGTH","currentAnswerData","qAnswer","sub_questions","isValidBookAppointmentSchedule","scheduleData","selectedOption","specificDate","currentDate","hours","duration","diff","asHours","specificDateVal","SCHEDULE_OPTIONS","TOMORROW","LATER","VALID_TIME_START_SUBMIT","convertAppointmentScheduleTime","timeEnd","mmAppointmentDate","TODAY","appointmentDate","appointment_time_begin","utc","unix","appointment_time_end","getBookAppointmentRequestParams","appointmentData","appointmentType","APPOINTMENT_TYPE_VALUES","APPOINTMENT_TYPES","selectedTopic","adviceRelatives","userInfo","surveyAnswers","phone_number","street","gender","postal_code","no","place","Object","values","question_id","question_title","answerData","formatAnswerItem","formatQuestionId","formatSubQuestions","scheduleTime","result_survey","appointment_type","selected_treatments_id","customer_gender","postcode","relatives","cost","CategoryItem","props","className","title","unit","onClick","isNil","MenuOptions","open","anchorEl","onClose","children","menuRef","useRef","useEffect","document","addEventListener","handleCloseMenu","removeEventListener","e","isClickAnchor","current","contains","target","ref","optionItem","index","handleClickOption","icon","AppointmentTagInfo","RequestAppointment","isUser","appointment","requestTimeStart","requestTimeEnd","useState","isOpenDialogAccept","setIsOpenDialogAccept","stopPropagation","onConfirm","onCancel","AcceptedAppointment","acceptedTimeStart","appointment_time_confirms_to_start","acceptedTimeEnd","appointment_time_confirms_to_stop","isJoin","lbButton","useMemo","FinishedAppointment","feedback","rate","CancelledAppointment","authId","useAuth","user_id","modified_date","cancel_by_id","cancelledUser","cancelled","mmModifiedTime","timeStartDate","modifiedDate","scheduleDateYMD","modifiedTime","lbCancelledBy","REQUESTED","APPOINTMENT_REQUEST_TYPES","ACCEPTED","FINISHED","CANCELLED","LABEL_USER","AppointmentItem","requestType","onOpenPopupEdit","onOpenPopupCancel","onSetSelectedAppointment","isDetail","isOpenMenu","setIsOpenMenu","btnMenuRef","treatments","realityTimeStart","appointment_time_begin_reality","realityTimeEnd","appointment_time_end_reality","acceptedNurse","user_consulting","bookedUser","user_create","diseases_title","isAccepted","timeStartSeconds","timeEndSeconds","isScheduleToday","scheduleDate","finishedTime","secondsToDuration","userId","first_name","last_name","avatar","isShowUserInfo","userName","userAvatar","avaDefault","isRequestAccepted","isToday","isEditAccepted","isShowGoogleCalendar","isShowBtnMenu","labelUser","handleClickMenuItem","isEdit","KMSImg","src","alt","renderFooterContent","DialogAcceptAppointment","rest","timeStartValue","DEFAULT_SCHEDULE_TIME_START","setTimeStart","defaultDateUnix","timeStartUnix","maxTimeStart","timeRequest","maxDuration","durationOptions","setDuration","timeStartOptions","lbTimeEnd","touchCurrentDate","mmDuration","diffTimeStart","diffDuration","valueOf","handleChangeTime","isSetTimeStart","onChange","AppointmentBtnConfirm","color","outline","QuestionItem","questionData","isSubQuestion","setAnswers","step_number","answerOptions","name","QUESTION_YES_NO_ICONS","subQuestions","handleChooseAnswer","newAnswers","keys","answerQuestionId","maxLength","placeholder","renderQuestion","subQuestion","ConsultingCategoryItem","description","image","NurseCourse","defaultSpecificDate","Date","maxSpecificDate","convertDateOptions","SetSchedule","isEditSchedule","lbDate","lbTime","oldSelectedOption","oldTimeStart","oldTimeEnd","oldSpecificDate","defaultDateOptions","MAX_TIME_SET_SCHEDULE_TODAY","dateOptions","setDateOptions","setSelectedOption","setTimeEnd","setSpecificDate","isOpenPopup","setIsOpenPopup","timeEndOptions","specificDateValue","isValidOption","some","dateOption","newSelectedOption","isValidTimeStart","option","newTimeStart","handleConfirm","isValidSchedule","isValidTimeEnd","disabled","selected","minDate","maxDate","type","show","handleClose","content","up","upCallback","dispatch","useDispatch","authReducer","useSelector","state","shallowEqual","updateProfile","payload","Dialog","hasClose","btnConfirm","btnCancel","centered","closeBtn","closeOnBackdrop","DialogTextArea","setValue"],"mappings":"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","file":"static/js/1.67ca457c.chunk.js","sourcesContent":["import moment from 'moment';\n\nimport { listHours } from 'config';\nimport { MAX_SCHEDULE_TIME, MAX_SCHEDULE_TIME_START } from 'configs/constants';\n\n/**\n * Get schedule time options in book an appointment\n *\n * @param currentTime Current time has format HH:mm\n * @param options Options\n *\n * @return array\n */\nexport const getScheduleTimeOptions = (currentTime: string, options: any = {}) => {\n  const { maxTime = MAX_SCHEDULE_TIME } = options;\n\n  const validTimes = listHours.filter((timeItem) => timeItem >= currentTime && timeItem <= maxTime);\n\n  return validTimes.map((value) => ({ label: value, value }));\n};\n\n/**\n * Get schedule time start in book an appointment\n *\n * @param defaultTime Default time, if defaultTime has value => do not get by current time\n *\n * @return array\n */\nexport const getScheduleTimeStart = (defaultTime?: string) => {\n  if (defaultTime) return defaultTime;\n\n  const timeStart = moment().add(2, 'hours').format('HH:mm');\n\n  return listHours.find((timeItem) => timeItem >= timeStart && timeItem <= '23:45') || timeStart;\n};\n\n/**\n * Get min schedule time end in book an appointment\n *\n * @param timeStart Time start value\n * @param additionalHours Additional hours\n *\n * @return string\n */\nexport const getScheduleMinTimeEnd = (timeStart: string = '', additionalHours: number = 1) => {\n  const mmTimeStart = moment(`${moment().format('YYYY-MM-DD')} ${timeStart}`);\n\n  return timeStart < MAX_SCHEDULE_TIME_START\n    ? mmTimeStart.add(additionalHours, 'hours').format('HH:mm')\n    : MAX_SCHEDULE_TIME;\n};\n\n/**\n * Get default time end by time start\n *\n * @param timeStart Time start value\n *\n * @return string\n */\nexport const getDefaultTimeEnd = (timeStart = '') => {\n  return timeStart < '23:00' ? getScheduleMinTimeEnd(timeStart) : MAX_SCHEDULE_TIME;\n};\n","import { store } from '../store';\nimport { AUTH_TYPES } from 'configs/constants';\nconst { USER, NURSE, ASSISTANT } = AUTH_TYPES;\n\n/**\n * Get group name of user\n *\n * @return string\n */\nconst getAuthGroupName = () => {\n  const reducerState = store.getState();\n  const { auth } = reducerState;\n  const { group_name = '' } = auth;\n\n  return group_name;\n};\n\n/**\n * Check auth is user\n *\n * @return boolean\n */\nexport const isRoleUser = () => {\n  return getAuthGroupName() === USER;\n};\n\n/**\n * Check auth is nurse\n *\n * @return boolean\n */\nexport const isRoleNurse = () => {\n  return getAuthGroupName() === NURSE;\n};\n\n/**\n * Check auth is assistant\n *\n * @return boolean\n */\nexport const isRoleAssistant = () => {\n  return getAuthGroupName() === ASSISTANT;\n};\n","/**\n * Get plural of word\n *\n * @param value How many of the word exist\n * @param word Word wanna make plural\n * @param suffixPlural Suffix word\n *\n * @return string\n */\nexport const pluralize = (value = 0, word = '', suffixPlural = 'en') => {\n  return value > 1 ? `${word}${suffixPlural}` : word;\n};\n\n/**\n * Get plural of exercise\n *\n * @param value How many of the exercise exist\n *\n * @return string\n */\nexport const pluralizeExcercise = (value = 0) => {\n  return `${value} ${value === 1 ? 'Übung' : 'Übungen'}`;\n};\n","import { includes } from 'lodash';\nimport {\n  QUESTION_TYPES,\n  MAX_QA_INPUT_LENGTH,\n  MAX_SUB_QA_INPUT_LENGTH,\n  VALID_TIME_START_SUBMIT,\n  SCHEDULE_OPTIONS,\n} from 'configs/constants';\nimport moment from 'moment';\n\n/**\n * Validate book an appointment survey's answers\n *\n * @param questions Questions get from database\n * @param answers User input answer\n *\n * @return Boolean\n */\nexport const validateBookAppointmentAnswers = (questions: any = [], answers: any = {}) => {\n  return questions.every((questionItem: any) => {\n    const { id: questionId, required, question_type, answers: qAnswers = [] } = questionItem;\n    const answerValues = qAnswers.reduce((acc: any, answerItem: any) => [...acc, answerItem.answer_title], []);\n\n    // get current question's answer\n    const { answer = '', parentQuestionId } = answers[questionId] || {};\n\n    // validate required\n    if (required && !answer) return false;\n\n    // validate value\n    switch (question_type) {\n      case QUESTION_TYPES.YES_NO:\n      case QUESTION_TYPES.RADIO: {\n        if (!includes(answerValues, answer)) {\n          return false;\n        }\n        break;\n      }\n      case QUESTION_TYPES.TEXTBOX: {\n        if (answer.length > MAX_QA_INPUT_LENGTH) return false;\n        if (parentQuestionId && answer.length > MAX_SUB_QA_INPUT_LENGTH) return false;\n      }\n    }\n\n    // validate sub questions\n    const currentAnswerData = qAnswers.find((qAnswer: any) => qAnswer.answer_title === answer);\n    if (currentAnswerData) {\n      const { sub_questions = [] } = currentAnswerData;\n\n      const isValidSubQA = validateBookAppointmentAnswers(sub_questions, answers);\n      if (!isValidSubQA) return false;\n    }\n\n    return true;\n  });\n};\n\n/**\n * Check valid book an appoint schedule\n *\n * @param scheduleData Schedule data\n *\n * @return boolean\n */\nexport const isValidBookAppointmentSchedule = (scheduleData: any) => {\n  const { selectedOption, timeStart, specificDate } = scheduleData || {};\n  const currentDate = moment().format('YYYY-MM-DD');\n  const duration = moment.duration(moment(`${currentDate} ${timeStart}`).diff(moment()));\n  const hours = duration.asHours();\n  const specificDateVal = moment(specificDate).format('YYYY-MM-DD');\n\n  // check valid specificDate\n  const isValidDate =\n    selectedOption === SCHEDULE_OPTIONS.TOMORROW ||\n    (selectedOption === SCHEDULE_OPTIONS.LATER && currentDate <= specificDateVal);\n\n  return isValidDate || hours >= VALID_TIME_START_SUBMIT;\n};\n","import moment from 'moment';\nimport { SCHEDULE_OPTIONS, APPOINTMENT_TYPES, APPOINTMENT_TYPE_VALUES } from 'configs/constants';\nimport { ScheduleData } from 'types/appointments';\n\n/**\n * Convert appointment schedule time\n *\n * @param scheduleData Schedule data\n *\n * @return object\n */\nexport const convertAppointmentScheduleTime = (scheduleData: ScheduleData) => {\n  const { selectedOption, specificDate, timeStart, timeEnd } = scheduleData;\n\n  // convert schedule time\n  let mmAppointmentDate = moment();\n  if (selectedOption !== SCHEDULE_OPTIONS.TODAY) {\n    mmAppointmentDate = selectedOption === SCHEDULE_OPTIONS.LATER ? moment(specificDate) : moment().add(1, 'd');\n  }\n  const appointmentDate = mmAppointmentDate.format('YYYY-MM-DD');\n\n  return {\n    appointment_time_begin: moment(`${appointmentDate} ${timeStart}`).utc().unix(),\n    appointment_time_end: moment(`${appointmentDate} ${timeEnd}`).utc().unix(),\n  };\n};\n\n/**\n * Get book an appointment request params\n *\n * @param appointmentData Book an appointment data\n * @param appointmentType For nurse or assistant\n *\n * @return Object\n */\nexport const getBookAppointmentRequestParams = (\n  appointmentData: any = {},\n  appointmentType = APPOINTMENT_TYPE_VALUES[APPOINTMENT_TYPES.NURSE],\n) => {\n  const {\n    selectedTopic,\n    adviceRelatives = [],\n    scheduleData = {},\n    userInfo = {},\n    surveyAnswers = {},\n  } = appointmentData || {};\n  const { phone_number = '', street, gender, postal_code, no, place } = userInfo;\n\n  // convert question's answer data\n  const questions = [...Object.values(surveyAnswers)].reduce((acc: any[], answerItem: any) => {\n    const { question_id, answer, question_title, parentQuestionId } = answerItem || {};\n    const answerData = { question_id, answer, question_title };\n\n    // if question is not sub question\n    if (!parentQuestionId) {\n      return [...acc, { ...answerData, sub_questions: [] }];\n    }\n\n    // add sub question into parent question\n    acc = acc.map((formatAnswerItem) => {\n      const { question_id: formatQuestionId, sub_questions: formatSubQuestions } = formatAnswerItem || {};\n      // if finded parent question\n      if (formatQuestionId === parentQuestionId) {\n        return {\n          ...formatAnswerItem,\n          sub_questions: [...formatSubQuestions, answerData],\n        };\n      }\n\n      return formatAnswerItem;\n    });\n    return acc;\n  }, []);\n\n  // convert schedule time\n  const scheduleTime = convertAppointmentScheduleTime(scheduleData);\n\n  return {\n    result_survey: { questions },\n    appointment_type: appointmentType,\n    selected_treatments_id: selectedTopic,\n    customer_gender: gender,\n    phone_number,\n    street,\n    postcode: postal_code,\n    no,\n    place,\n    relatives: adviceRelatives,\n    cost: 1,\n    ...scheduleTime,\n  };\n};\n","import React from 'react';\nimport { isNil } from 'lodash';\n\nimport './CategoryItem.scss';\n\ninterface PropTypes {\n  className?: string;\n  title?: string;\n  value?: number;\n  unit?: string;\n  onClick?: () => void;\n}\n\nconst CategoryItem = (props: PropTypes) => {\n  const { className = '', title = '', value, unit = 'Beratungen', onClick = () => {} } = props;\n\n  return (\n    <div className={`CategoryItem-container ${className}`} onClick={onClick}>\n      <h5 className=\"CategoryItem-title\">{title}</h5>\n      <div className=\"CategoryItem-footer\">\n        <span className=\"text\">{`${!isNil(value) ? value : ''} ${unit}`}</span>\n        <span className=\"hb-icon-arrow-right icon\" />\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryItem;\n","import React, { useEffect, useRef } from 'react';\n\nimport './Menu.scss';\n\ntype Option = {\n  icon?: string;\n  label: string;\n  onClick?: () => void;\n};\n\ninterface PropTypes {\n  className?: string;\n  anchorEl?: any;\n  open?: boolean;\n  options?: Option[];\n  onClose?: () => void;\n  children?: React.ReactNode;\n}\n\nconst MenuOptions = (props: PropTypes) => {\n  const { className = '', open, options = [], anchorEl, onClose = () => {}, children } = props;\n\n  // ref\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (open) document.addEventListener('click', handleCloseMenu);\n\n    return () => {\n      document.removeEventListener('click', handleCloseMenu);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]);\n\n  /**\n   * Handle close menu\n   */\n  const handleCloseMenu = (e: any) => {\n    const isClickAnchor = !anchorEl || !anchorEl?.current?.contains(e.target);\n\n    if (!menuRef?.current?.contains(e.target) && isClickAnchor) {\n      onClose();\n    }\n  };\n\n  /**\n   * Handle click option item\n   *\n   * @param optionItem Menu option item\n   */\n  const handleClickOption = (optionItem: Option) => {\n    const { onClick } = optionItem;\n\n    onClick && onClick();\n    onClose();\n  };\n\n  return (\n    <div className={`MenuOptions-area ${className} ${open && 'open'}`} ref={menuRef}>\n      <ul className=\"MenuOptions-list\">\n        {children || (\n          <>\n            {options.map((optionItem, index) => (\n              <li key={index} onClick={() => handleClickOption(optionItem)}>\n                {optionItem.icon && <i className={optionItem.icon} />} {optionItem.label}\n              </li>\n            ))}\n          </>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default MenuOptions;\n","import React from 'react';\n\ninterface PropTypes {\n  icon?: string;\n  value?: string;\n}\n\nconst AppointmentTagInfo = (props: PropTypes) => {\n  const { icon = '', value = '' } = props;\n\n  return (\n    <div className=\"AppointmentTagInfo-container\">\n      {icon && <i className={`HbIc-${icon}`} />}\n      {value}\n    </div>\n  );\n};\n\nexport default AppointmentTagInfo;\n","import React, { useState } from 'react';\n\nimport { HBButtonSmall } from 'hbBaseClass';\nimport { DialogAcceptAppointment } from 'components/screens';\n\nimport { isRoleUser } from 'utilities';\n\ninterface PropTypes {\n  appointment: any;\n}\n\nexport default function RequestAppointment(props: PropTypes) {\n  const isUser = isRoleUser();\n  const { appointment } = props;\n  const { appointment_time_begin: requestTimeStart, appointment_time_end: requestTimeEnd } = appointment || {};\n\n  // states\n  const [isOpenDialogAccept, setIsOpenDialogAccept] = useState(false);\n\n  /**\n   * Handle click call\n   *\n   * @param e DOM Event\n   */\n  const handleClickCall = (e: React.MouseEvent) => {\n    setIsOpenDialogAccept(true);\n  };\n\n  return (\n    <div className={`AppointmentItem-status requested ${isUser && 'hasBorder'}`} onClick={(e) => e.stopPropagation()}>\n      {isUser ? (\n        <span className=\"status\">\n          <i className=\"hb-icon-loader\" />\n          <span>Antwort ausständig</span>\n        </span>\n      ) : (\n        <HBButtonSmall onClick={handleClickCall}>Bearbeiten</HBButtonSmall>\n      )}\n      <DialogAcceptAppointment\n        open={isOpenDialogAccept}\n        requestTimeStart={requestTimeStart}\n        requestTimeEnd={requestTimeEnd}\n        onConfirm={() => setIsOpenDialogAccept(false)}\n        onCancel={() => setIsOpenDialogAccept(false)}\n      />\n    </div>\n  );\n}\n","import React, { useMemo } from 'react';\nimport moment from 'moment';\n\nimport { HBButtonSmall } from 'hbBaseClass';\nimport { isRoleUser } from 'utilities';\n\ninterface PropTypes {\n  appointment: any;\n}\n\n// enable button join quarter to start time\nconst BUFFER_BEFORE_START = 15 * 60;\n\nexport default function AcceptedAppointment(props: PropTypes) {\n  const { appointment } = props;\n  const { appointment_time_confirms_to_start: acceptedTimeStart, appointment_time_confirms_to_stop: acceptedTimeEnd } =\n    appointment;\n  const currentTime = moment().unix();\n  const isJoin = currentTime >= acceptedTimeStart - BUFFER_BEFORE_START && currentTime <= acceptedTimeEnd;\n\n  // get button label\n  const lbButton = useMemo(() => (isRoleUser() ? 'Teilnehmen' : 'Beratung starten'), []);\n\n  return (\n    <div className={`AppointmentItem-status accepted ${isJoin && 'hasBorder'}`}>\n      {isJoin && <HBButtonSmall onClick={(e: any) => e.stopPropagation()}>{lbButton}</HBButtonSmall>}\n    </div>\n  );\n}\n","import React from 'react';\nimport { HBButtonSmall } from 'hbBaseClass';\nimport { isRoleUser, pluralize } from 'utilities';\n\ninterface PropTypes {\n  appointment: any;\n}\n\nexport default function FinishedAppointment(props: PropTypes) {\n  const { appointment } = props;\n  const { feedback: rate = 0 } = appointment;\n\n  return (\n    <div className=\"AppointmentItem-status finished hasBorder\" onClick={(e) => e.stopPropagation()}>\n      {!rate ? (\n        <>{isRoleUser() && <HBButtonSmall>Beratung bewerten</HBButtonSmall>}</>\n      ) : (\n        <div className=\"vote\">\n          <span className=\"rate\">\n            <span className=\"HbIc-star icon\" />\n            {`${rate} ${pluralize(rate, 'Stern', 'e')}`}\n          </span>\n          <HBButtonSmall>Zur Bewertung</HBButtonSmall>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useMemo } from 'react';\nimport moment from 'moment';\nimport { useAuth } from 'store/auth';\nimport { SCHEDULE_OPTIONS } from 'configs/constants';\nimport { isRoleUser } from 'utilities';\n\ninterface PropTypes {\n  className?: string;\n  timeStart?: number;\n  appointment: any;\n}\n\nexport default function CancelledAppointment(props: PropTypes) {\n  const { user_id: authId } = useAuth();\n\n  const { className = '', timeStart = 0, appointment } = props;\n  const { modified_date, cancel_by_id, cancelled: cancelledUser } = appointment;\n\n  // convert datetime\n  const { modifiedDate, modifiedTime } = useMemo(() => {\n    const currentDate = moment().format('DD.MM.YY');\n    const mmTimeStart = moment(timeStart * 1000);\n    const mmModifiedTime = moment(modified_date * 1000);\n\n    const timeStartDate = mmTimeStart.format('DD.MM.YY');\n    const modifiedDate = mmModifiedTime.format('DD.MM.YY');\n    const isScheduleToday = currentDate === timeStartDate;\n\n    return {\n      scheduleDateYMD: isScheduleToday ? SCHEDULE_OPTIONS.TODAY : mmTimeStart.format('YYYY-MM-DD'),\n      modifiedDate: currentDate === modifiedDate ? SCHEDULE_OPTIONS.TODAY : modifiedDate,\n      modifiedTime: mmModifiedTime.format('HH:mm'),\n    };\n  }, [timeStart, modified_date]);\n\n  // get label cancelled by\n  const lbCancelledBy = useMemo(() => {\n    if (authId === cancel_by_id) {\n      return 'Ihre Stornierung';\n    }\n\n    return cancelledUser?.id\n      ? isRoleUser()\n        ? 'Stornierung durch den/die PflegeberaterIn'\n        : 'Stornierung durch den Patienten'\n      : 'Automatische Stornierung durch das System';\n  }, [cancel_by_id, cancelledUser, authId]);\n\n  return (\n    <div className={`AppointmentItem-status cancelled hasBorder ${className}`}>\n      <div className=\"reason\">\n        <span className=\"HbIc-x-rounded icon\" />\n        <span>\n          {lbCancelledBy}: {modifiedDate} um {modifiedTime}\n        </span>\n      </div>\n    </div>\n  );\n}\n","import React, { useMemo, useState, useRef } from 'react';\nimport moment from 'moment';\n\nimport { MenuOptions } from 'components/menu';\nimport KMSImg from 'components/kmsComponents/KMSImg';\nimport AppointmentTagInfo from './AppointmentTagInfo';\nimport RequestAppointment from './RequestAppointment';\nimport AcceptedAppointment from './AcceptedAppointment';\nimport FinishedAppointment from './FinishedAppointment';\nimport CancelledAppointment from './CancelledAppointment';\n\nimport { useAuth } from 'store/auth';\nimport { APPOINTMENT_REQUEST_TYPES, MAX_SCHEDULE_TIME, SCHEDULE_OPTIONS } from 'configs/constants';\nimport { secondsToDuration } from 'utils';\nimport { isRoleUser } from 'utilities';\nimport avaDefault from 'assets/images/default-avatar.png';\n\nimport './AppointmentItem.scss';\n\nconst { REQUESTED, ACCEPTED, FINISHED, CANCELLED } = APPOINTMENT_REQUEST_TYPES;\n\nconst LABEL_USER = {\n  [ACCEPTED]: 'Anfrage gesendet an:',\n  [FINISHED]: 'Pflegeberaterin:',\n  [CANCELLED]: 'Pflegeberaterin:',\n};\n\ninterface PropTypes {\n  className?: string;\n  requestType?: string;\n  appointment: any;\n  onOpenPopupEdit?: Function;\n  onOpenPopupCancel?: Function;\n  onSetSelectedAppointment?: Function;\n  onClick?: () => void;\n  isDetail?: boolean;\n}\n\nconst AppointmentItem = (props: PropTypes) => {\n  const { user_id: authId } = useAuth();\n  const isUser = isRoleUser();\n  const {\n    className = '',\n    requestType = REQUESTED,\n    appointment,\n    onOpenPopupEdit,\n    onOpenPopupCancel,\n    onSetSelectedAppointment,\n    isDetail,\n    onClick = () => {},\n  } = props;\n  const [isOpenMenu, setIsOpenMenu] = useState(false);\n\n  // ref\n  const btnMenuRef = useRef<HTMLSpanElement>(null);\n\n  const {\n    appointment_time_begin: requestTimeStart,\n    appointment_time_end: requestTimeEnd,\n    treatments,\n    cancelled: cancelledUser,\n    appointment_time_confirms_to_start: acceptedTimeStart,\n    appointment_time_confirms_to_stop: acceptedTimeEnd,\n    appointment_time_begin_reality: realityTimeStart,\n    appointment_time_end_reality: realityTimeEnd,\n    user_consulting: acceptedNurse,\n    user_create: bookedUser,\n  } = appointment;\n  const { diseases_title = '' } = treatments || {};\n\n  // get timeStart, timeEnd by request type\n  const { timeStartSeconds, timeEndSeconds } = useMemo(() => {\n    const isAccepted = acceptedTimeStart;\n\n    switch (requestType) {\n      case REQUESTED:\n        return {\n          timeStartSeconds: requestTimeStart,\n          timeEndSeconds: requestTimeEnd,\n        };\n      case ACCEPTED:\n      case FINISHED:\n        return {\n          timeStartSeconds: acceptedTimeStart,\n          timeEndSeconds: acceptedTimeEnd,\n        };\n      case CANCELLED:\n      default:\n        return {\n          timeStartSeconds: isAccepted ? acceptedTimeStart : requestTimeStart,\n          timeEndSeconds: isAccepted ? acceptedTimeEnd : requestTimeEnd,\n        };\n    }\n  }, [requestType, requestTimeStart, requestTimeEnd, acceptedTimeStart, acceptedTimeEnd]);\n\n  // convert datetime\n  const { scheduleTime, scheduleDate, finishedTime, scheduleDateYMD } = useMemo(() => {\n    const currentDate = moment().format('DD.MM.YY');\n    const mmTimeStart = moment.unix(timeStartSeconds);\n\n    const timeStart = mmTimeStart.format('HH:mm');\n    const timeEnd = moment.unix(timeEndSeconds).format('HH:mm');\n    const timeStartDate = mmTimeStart.format('DD.MM.YY');\n    const isScheduleToday = currentDate === timeStartDate;\n\n    return {\n      scheduleTime: `${timeStart} - ${timeEnd === '00:00' ? MAX_SCHEDULE_TIME : timeEnd}`,\n      scheduleDate: isScheduleToday ? SCHEDULE_OPTIONS.TODAY : timeStartDate,\n      scheduleDateYMD: isScheduleToday ? SCHEDULE_OPTIONS.TODAY : mmTimeStart.format('YYYY-MM-DD'),\n      finishedTime: secondsToDuration(realityTimeEnd - realityTimeStart),\n    };\n  }, [timeStartSeconds, timeEndSeconds, realityTimeStart, realityTimeEnd]);\n\n  // get nurse's info or patient's info\n  const { isShowUserInfo, userName, userAvatar } = useMemo(() => {\n    const nurseInfo = requestType === CANCELLED ? cancelledUser : acceptedNurse;\n    const userInfo = isUser ? nurseInfo : bookedUser;\n\n    const { id: userId, first_name = '', last_name = '', avatar } = userInfo || {};\n    let isShowUserInfo = true;\n\n    // With request type is cancelled & no any nurse had cancelled => not show user's info\n    if (requestType === CANCELLED && isUser && (!userId || userId === authId)) {\n      isShowUserInfo = false;\n    }\n\n    return {\n      isShowUserInfo,\n      userName: `${first_name} ${last_name}`,\n      userAvatar: avatar || avaDefault,\n    };\n  }, [requestType, cancelledUser, acceptedNurse, isUser, bookedUser, authId]);\n\n  // check can edit appointment accepted\n  const { isEditAccepted, isShowGoogleCalendar } = useMemo(() => {\n    const isRequestAccepted = requestType === ACCEPTED;\n    const currentDate = moment().format('YYYY-MM-DD');\n    const duration = moment.duration(moment.unix(acceptedTimeStart).diff(moment()));\n    const hours = duration.asHours();\n    const isToday = scheduleDate === SCHEDULE_OPTIONS.TODAY;\n\n    return {\n      isEditAccepted: isRequestAccepted && ((isToday && hours > 1) || scheduleDateYMD > currentDate),\n      isShowGoogleCalendar: isRequestAccepted && isToday && hours <= 1,\n    };\n  }, [scheduleDate, scheduleDateYMD, acceptedTimeStart, requestType]);\n\n  // check show button menu\n  const isShowBtnMenu = useMemo(() => {\n    return requestType === REQUESTED || isEditAccepted || isShowGoogleCalendar;\n  }, [requestType, isEditAccepted, isShowGoogleCalendar]);\n\n  // Get label user\n  const labelUser = useMemo(() => {\n    return isDetail ? 'Pflegenotfall Soforthilfe:' : isUser ? LABEL_USER[requestType] : 'Ihr Patient:';\n  }, [isDetail, requestType, isUser]);\n\n  /**\n   * Handle click menu item\n   *\n   * @param e React MouseEvent\n   * @param isEdit Action edit or cancel\n   */\n  const handleClickMenuItem = (isEdit?: boolean) => (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpenMenu(false);\n    onSetSelectedAppointment && onSetSelectedAppointment(appointment);\n\n    if (isEdit) {\n      requestType === REQUESTED && onOpenPopupEdit && onOpenPopupEdit();\n      return;\n    }\n\n    onOpenPopupCancel && onOpenPopupCancel();\n  };\n\n  /**\n   * Handle click menu options\n   *\n   * @param e React MouseEvent\n   */\n  const handleClickMenuOptions = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpenMenu(true);\n  };\n\n  /**\n   * Handle render footer content\n   */\n  const renderFooterContent = () => {\n    switch (requestType) {\n      case REQUESTED:\n        return <RequestAppointment appointment={appointment} />;\n      case CANCELLED:\n        return <CancelledAppointment appointment={appointment} timeStart={timeStartSeconds} />;\n      case FINISHED:\n        return <FinishedAppointment appointment={appointment} />;\n      case ACCEPTED: {\n        return <AcceptedAppointment appointment={appointment} />;\n      }\n    }\n  };\n\n  return (\n    <div className={`AppointmentItem-container ${className} ${isDetail && 'detail'}`} onClick={onClick}>\n      <div className=\"AppointmentItem-up\">\n        <div className=\"AppointmentItem-schedule\">\n          <div className=\"AppointmentItem-dateTime\">\n            <AppointmentTagInfo icon=\"clock\" value={scheduleTime} />\n            <AppointmentTagInfo icon=\"calendar\" value={scheduleDate} />\n            {requestType === FINISHED && finishedTime && <AppointmentTagInfo icon=\"hourglass\" value={finishedTime} />}\n          </div>\n          {!isDetail && isShowBtnMenu && (\n            <>\n              <span\n                className=\"hb-icon-more-ver AppointmentItem-btnMenu\"\n                ref={btnMenuRef}\n                onClick={handleClickMenuOptions}\n              />\n              <MenuOptions open={isOpenMenu} anchorEl={btnMenuRef} onClose={() => setIsOpenMenu(false)}>\n                {(requestType === REQUESTED || (requestType === ACCEPTED && isEditAccepted)) && (\n                  <>\n                    {isUser && (\n                      <li onClick={handleClickMenuItem(true)}>\n                        <i className=\"hb-icon-edit-2\" /> Bearbeiten\n                      </li>\n                    )}\n                    <li onClick={handleClickMenuItem()}>\n                      <i className=\"hb-icon-trash\" /> {isUser ? 'Löschen' : 'Termin stornieren'}\n                    </li>\n                  </>\n                )}\n                {isShowGoogleCalendar && (\n                  <li onClick={() => setIsOpenMenu(false)}>\n                    <i className=\"hb-icon-calendar\" /> Im Google-Kalender speichern\n                  </li>\n                )}\n              </MenuOptions>\n            </>\n          )}\n        </div>\n        <h4 className=\"AppointmentItem-topic\">{diseases_title}</h4>\n      </div>\n      <div className=\"AppointmentItem-down\">\n        {requestType !== REQUESTED && isShowUserInfo && (\n          <div className=\"AppointmentItem-userInfo\">\n            <KMSImg className=\"AppointmentItem-ava\" src={userAvatar} alt=\"\" />\n            <div className=\"AppointmentItem-userName\">\n              <p>{labelUser}</p>\n              <p>{userName}</p>\n            </div>\n          </div>\n        )}\n        <div className=\"AppointmentItem-footer\">{renderFooterContent()}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default AppointmentItem;\n","import React, { useMemo, useState } from 'react';\nimport moment from 'moment';\n\nimport { HBButtonSmall } from 'hbBaseClass';\nimport { Dialog, DialogPropTypes } from 'components/dialog';\nimport { FormGroupSelect } from 'components/form';\n\nimport { DEFAULT_SCHEDULE_TIME_START } from 'configs/constants';\nimport { getScheduleTimeOptions, getScheduleTimeStart } from 'utilities';\n\nimport './DialogAcceptAppointment.scss';\n\ninterface PropTypes extends Omit<DialogPropTypes, 'title'> {\n  title?: string;\n  requestTimeStart?: number;\n  requestTimeEnd?: number;\n}\n\n// Buffer time use for calculate max start time\nconst BUFFER_TIME = 15 * 60;\nconst MIN_DURATION = '00:15';\n\nexport default function DialogAcceptAppointment(props: PropTypes) {\n  const { title = 'Beratung Annehmen', requestTimeStart = 0, requestTimeEnd = 0, onConfirm, onCancel, ...rest } = props;\n\n  // Convert time start\n  const timeStartValue = useMemo(() => moment.unix(requestTimeStart).format('HH:mm'), [requestTimeStart]);\n  const [timeStart, setTimeStart] = useState(timeStartValue || getScheduleTimeStart(DEFAULT_SCHEDULE_TIME_START));\n\n  // Get max time start, max duration\n  const { maxTimeStart, maxDuration } = useMemo(() => {\n    const currentDate = moment().format('YYYY-MM-DD');\n    const defaultDateUnix = moment(`${currentDate} 00:00`).unix();\n    const timeStartUnix = moment(`${currentDate} ${timeStart}`).unix();\n\n    const maxTimeStart = requestTimeEnd - BUFFER_TIME;\n    const timeRequest = defaultDateUnix + requestTimeEnd - timeStartUnix;\n\n    return {\n      maxTimeStart: moment.unix(maxTimeStart).format('HH:mm'),\n      maxDuration: moment.unix(timeRequest).format('HH:mm'),\n    };\n  }, [timeStart, requestTimeEnd]);\n\n  // Generate duration options\n  const durationOptions = useMemo(() => getScheduleTimeOptions(MIN_DURATION, { maxTime: maxDuration }), [maxDuration]);\n  const [duration, setDuration] = useState(durationOptions[0]?.value);\n\n  // Generate time start options\n  const timeStartOptions = useMemo(() => {\n    return getScheduleTimeOptions(timeStartValue, { maxTime: maxTimeStart });\n  }, [timeStartValue, maxTimeStart]);\n\n  // Get time end\n  const lbTimeEnd = useMemo(() => {\n    const currentDate = moment().format('YYYY-MM-DD');\n    const touchCurrentDate = moment(`${currentDate} 00:00`); // start each date\n\n    // convert time start, duration to moment\n    const mmTimeStart = moment(`${currentDate} ${timeStart}`);\n    const mmDuration = moment(`${currentDate} ${duration}`);\n\n    // calculate time start, duration to get time end\n    const diffTimeStart = mmTimeStart.diff(moment(touchCurrentDate));\n    const diffDuration = mmDuration.diff(moment(touchCurrentDate));\n    const timeEnd = touchCurrentDate.valueOf() + diffTimeStart + diffDuration;\n\n    return moment(timeEnd).format('HH:mm');\n  }, [timeStart, duration]);\n\n  /**\n   * Handle change time\n   *\n   * @param isSetTimeStart Set time start or time end\n   * @param e DOM Event\n   */\n  const handleChangeTime = (isSetTimeStart?: boolean) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value = '' } = e.target;\n\n    if (isSetTimeStart) {\n      setTimeStart(value);\n      return;\n    }\n\n    setDuration(value);\n  };\n\n  return (\n    <Dialog {...rest} title={title}>\n      <div className=\"DialogAcceptAppointment-timesOptions\">\n        <FormGroupSelect\n          label=\"Beratungsbeginn\"\n          value={timeStart}\n          options={timeStartOptions}\n          onChange={handleChangeTime(true)}\n        />\n        <FormGroupSelect label=\"Dauer\" value={duration} options={durationOptions} onChange={handleChangeTime()} />\n      </div>\n      <div className=\"DialogAcceptAppointment-time\">\n        <span>Beratungsende</span>\n        <span>{lbTimeEnd} Uhr</span>\n      </div>\n      <div className=\"DialogAcceptAppointment-actions\">\n        <HBButtonSmall onClick={onConfirm}>Weiter</HBButtonSmall>\n        <HBButtonSmall className=\"cancel\" onClick={onCancel}>\n          Abbrechen\n        </HBButtonSmall>\n      </div>\n    </Dialog>\n  );\n}\n","import React from 'react'\n\nimport { HBButtonFull, HBButtonFullProps } from 'hbBaseClass'\n\ninterface PropTypes extends HBButtonFullProps {\n  title: string;\n  onClick?: Function;\n}\n\nconst AppointmentBtnConfirm: React.FC<PropTypes> = (props) => {\n  const { title, onClick = () => {}, ...rest } = props\n\n  return (\n    <div className=\"AppointmentLayout-footer\">\n      <HBButtonFull\n        {...rest}\n        color=\"petrol\"\n        outline\n        children={title}\n        onClick={onClick}\n      />\n    </div>\n  )\n}\n\nexport default AppointmentBtnConfirm\n","import React, { useMemo } from 'react';\n\nimport { ListInputRadios, ListInputRadiosVertical, InputTextArea } from 'components';\n\nimport { QUESTION_TYPES, QUESTION_YES_NO_ICONS, MAX_QA_INPUT_LENGTH, MAX_SUB_QA_INPUT_LENGTH } from 'configs/constants';\n\ninterface PropTypes {\n  questionData: any;\n  parentQuestionId?: number;\n  isSubQuestion?: boolean;\n  answers: any;\n  setAnswers: (answers: any) => void;\n}\n\nconst QuestionItem = (props: PropTypes) => {\n  const { questionData = {}, parentQuestionId, isSubQuestion, answers = {}, setAnswers = () => {} } = props;\n  const { id: questionId, question_title = '', question_type, step_number, answers: qAnswers = [] } = questionData;\n\n  // Get answer options\n  const answerOptions = useMemo(() => {\n    return qAnswers.map((answerItem: any) => {\n      const { answer_title: label } = answerItem;\n\n      return { label, name: questionId, value: label, icon: QUESTION_YES_NO_ICONS[label] };\n    });\n  }, [questionId, qAnswers]);\n\n  // Get answer\n  const answer = useMemo(() => {\n    const { answer = '' } = answers[questionId] || {};\n\n    return answer;\n  }, [questionId, answers]);\n\n  // Get sub questions\n  const subQuestions = useMemo(() => {\n    const answerData = qAnswers.find((answerItem: any) => answerItem?.answer_title === answer) || {};\n    const { sub_questions = [] } = answerData;\n\n    return sub_questions;\n  }, [qAnswers, answer]);\n\n  /**\n   * Handle choose answer for all question type\n   *\n   * @param e React.ChangeEvent (HTMLInputElement))\n   */\n  const handleChooseAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    // clear old additional question answer with same question id\n    const newAnswers = Object.keys(answers).reduce((acc, answerQuestionId) => {\n      const answerItem = answers[answerQuestionId] || {};\n      const { parentQuestionId } = answerItem;\n\n      return parentQuestionId !== questionId ? { ...acc, [answerQuestionId]: answerItem } : acc;\n    }, {});\n\n    // update new answer\n    setAnswers({\n      ...newAnswers,\n      [questionId]: {\n        question_id: questionId,\n        question_title,\n        answer: value,\n        step_number,\n        parentQuestionId,\n      },\n    });\n  };\n\n  /**\n   * Handle render child question content\n   */\n  const renderQuestion = () => {\n    switch (question_type) {\n      case QUESTION_TYPES.TEXTBOX:\n        return (\n          <InputTextArea\n            value={answer}\n            onChange={handleChooseAnswer}\n            maxLength={isSubQuestion ? MAX_SUB_QA_INPUT_LENGTH : MAX_QA_INPUT_LENGTH}\n            placeholder={isSubQuestion ? 'Ihr Pflegehilfsmittel' : 'Bitte angeben'}\n          />\n        );\n      case QUESTION_TYPES.RADIO:\n        return <ListInputRadios value={answer} options={answerOptions} onChange={handleChooseAnswer} />;\n      case QUESTION_TYPES.YES_NO:\n      default:\n        return <ListInputRadiosVertical value={answer} options={answerOptions} onChange={handleChooseAnswer} />;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"SurveyQuestionItem-container\">\n        <h3 className=\"AppointmentLayout-title\">{question_title}</h3>\n        <div className=\"SurveyQuestionItem-answers\">{renderQuestion()}</div>\n      </div>\n      {subQuestions.map((subQuestion: any, index: number) => (\n        <QuestionItem\n          key={index}\n          isSubQuestion\n          questionData={subQuestion}\n          parentQuestionId={questionId}\n          answers={answers}\n          setAnswers={setAnswers}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default QuestionItem;\n","import KMSImg from 'components/kmsComponents/KMSImg';\nimport React from 'react';\n\nimport './ConsultingCategoryItem.scss';\n\ninterface PropTypes {\n  className?: string;\n  title?: string;\n  description?: string;\n  image?: any;\n  children?: React.ReactNode;\n  onClick?: () => void;\n}\n\nconst ConsultingCategoryItem = (props: PropTypes) => {\n  const { className = '', title = '', description = '', image, children, onClick } = props;\n\n  return (\n    <div className={`ConsultingCategoryItem-container ${className}`} onClick={onClick}>\n      {children || (\n        <>\n          <div className=\"ConsultingCategoryItem-up\">\n            <h4 className=\"ConsultingCategoryItem-title\">{title}</h4>\n            <p className=\"ConsultingCategoryItem-desc\">{description}</p>\n          </div>\n          {image && (\n            <div className=\"ConsultingCategoryItem-image\">\n              <KMSImg src={image} alt=\"\" />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ConsultingCategoryItem;\n","import React from 'react';\nimport { HBButtonSmall } from 'hbBaseClass';\nimport ConsultingCategoryItem from './ConsultingCategoryItem';\n\nimport './NurseCourse.scss';\n\ninterface PropTypes {\n  className?: string;\n}\n\nexport default function NurseCourse(props: PropTypes) {\n  const { className = '' } = props;\n\n  return (\n    <ConsultingCategoryItem className={`NurseCourse-container ${className}`}>\n      <div className=\"NurseCourse-content\">\n        <h2 className=\"ConsultingCategoryItem-title\">Pflegekurse</h2>\n        <div className=\"NurseCourse-sections\">\n          <div className=\"NurseCourse-section\">\n            <p className=\"ConsultingCategoryItem-desc\">Pflegekurse für mehrere Teilnehmer erstellen und verwalten:</p>\n            <HBButtonSmall>Eigene Kurse verwalten</HBButtonSmall>\n          </div>\n          <div className=\"NurseCourse-section\">\n            <p className=\"ConsultingCategoryItem-desc\">Nutzen Sie selbst das Kursangebot:</p>\n            <HBButtonSmall>An Kursen teilnehmen</HBButtonSmall>\n          </div>\n        </div>\n      </div>\n    </ConsultingCategoryItem>\n  );\n}\n","import React, { useMemo, useEffect, useState } from 'react';\nimport moment from 'moment';\n\nimport { HBButtonSmall, HBModalConfirm } from 'hbBaseClass';\nimport { FormGroupSelect, FormGroupDatePicker, ButtonOptions } from 'components';\nimport { AppointmentBtnConfirm } from './bookAppointment';\n\nimport {\n  SCHEDULE_OPTIONS,\n  MAX_SCHEDULE_TIME_START,\n  DEFAULT_SCHEDULE_TIME_START,\n  MAX_TIME_SET_SCHEDULE_TODAY,\n} from 'configs/constants';\nimport {\n  getScheduleTimeOptions,\n  getScheduleTimeStart,\n  getScheduleMinTimeEnd,\n  isValidBookAppointmentSchedule,\n  getDefaultTimeEnd,\n} from 'utilities';\nimport { ScheduleData } from 'types/appointments';\n\nimport './SetSchedule.scss';\n\nconst { TODAY, TOMORROW, LATER } = SCHEDULE_OPTIONS;\n\nconst defaultSpecificDate = new Date(moment().add(2, 'd').format('YYYY-MM-DD'));\nconst maxSpecificDate = new Date(moment().add(21, 'd').format('YYYY-MM-DD'));\n\n/**\n * Get date options\n *\n * @param options List date options\n */\nconst convertDateOptions = (options: string[] = []) => options.map((label: string) => ({ label, value: label }));\n\ninterface PropTypes {\n  className?: string;\n  isEditSchedule?: boolean;\n  scheduleData?: ScheduleData;\n  lbDate?: string;\n  lbTime?: string;\n  onConfirm?: (data?: any) => void;\n}\n\nconst SetSchedule = (props: PropTypes) => {\n  const {\n    className = '',\n    isEditSchedule,\n    scheduleData,\n    lbDate = 'Datum',\n    lbTime = 'Von – Bis',\n    onConfirm = () => {},\n  } = props;\n  const {\n    selectedOption: oldSelectedOption,\n    timeStart: oldTimeStart,\n    timeEnd: oldTimeEnd,\n    specificDate: oldSpecificDate,\n  } = scheduleData || {};\n\n  // get date options\n  const defaultDateOptions = useMemo(() => {\n    const currentTime = moment().format('HH:mm');\n\n    return currentTime > MAX_TIME_SET_SCHEDULE_TODAY ? [TOMORROW, LATER] : [TODAY, TOMORROW, LATER];\n  }, []);\n\n  // states\n  const [dateOptions, setDateOptions] = useState(convertDateOptions(defaultDateOptions));\n  const [selectedOption, setSelectedOption] = useState(oldSelectedOption || dateOptions[0]?.value);\n  const [timeStart, setTimeStart] = useState(\n    oldTimeStart || getScheduleTimeStart(selectedOption === TODAY ? '' : DEFAULT_SCHEDULE_TIME_START),\n  );\n  const [timeEnd, setTimeEnd] = useState(oldTimeEnd || getDefaultTimeEnd(timeStart));\n  const [specificDate, setSpecificDate] = useState(oldSpecificDate || defaultSpecificDate);\n  const [isOpenPopup, setIsOpenPopup] = useState(false);\n\n  // Generate time start options\n  const timeStartOptions = useMemo(() => {\n    const timeStart = selectedOption === TODAY ? getScheduleTimeStart() : '00:00';\n\n    return getScheduleTimeOptions(timeStart, { maxTime: MAX_SCHEDULE_TIME_START });\n  }, [selectedOption]);\n\n  // Generate time end options\n  const timeEndOptions = useMemo(() => getScheduleTimeOptions(getScheduleMinTimeEnd(timeStart, 0.25)), [timeStart]);\n\n  // Convert specific date value\n  const specificDateValue = useMemo(() => moment(specificDate).format('DD.MM.YYYY'), [specificDate]);\n\n  useEffect(() => {\n    // if selectedOption is invalid in list dateOptions => update new option\n    const isValidOption = dateOptions.some((dateOption) => dateOption.value === selectedOption);\n    let newSelectedOption = selectedOption;\n    if (!isValidOption) {\n      newSelectedOption = dateOptions[0]?.value;\n      setSelectedOption(newSelectedOption);\n    }\n\n    // if before timeStart, timeEnd is invalid => auto update new time by current time\n    const isValidTimeStart = timeStartOptions.some((option) => option.value === timeStart);\n    if (!isValidOption || !isValidTimeStart) {\n      const newTimeStart = getScheduleTimeStart(newSelectedOption === TODAY ? '' : DEFAULT_SCHEDULE_TIME_START);\n      setTimeStart(newTimeStart);\n      setTimeEnd(getDefaultTimeEnd(newTimeStart));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Handle change time\n   *\n   * @param isSetTimeStart Set time start or time end\n   * @param e DOM Event\n   */\n  const handleChangeTime = (isSetTimeStart?: boolean) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value = '' } = e.target;\n\n    if (isSetTimeStart) {\n      setTimeStart(value);\n      setTimeEnd(getDefaultTimeEnd(value));\n      return;\n    }\n\n    setTimeEnd(value);\n  };\n\n  /**\n   * Handle change specific date\n   *\n   * @param value Specific date\n   */\n  const handleChangeSpecificDate = (value: Date) => {\n    setSpecificDate(value);\n  };\n\n  /**\n   * Handle change date option\n   *\n   * @param value Date option\n   */\n  const handleChangeDateOption = (value: string) => {\n    const timeStart = getScheduleTimeStart(value === TODAY ? '' : DEFAULT_SCHEDULE_TIME_START);\n    setTimeStart(timeStart);\n    setTimeEnd(getDefaultTimeEnd(timeStart));\n\n    setSelectedOption(value);\n  };\n\n  /**\n   * Handle confirm\n   */\n  const handleConfirm = () => {\n    const isValidSchedule = isValidBookAppointmentSchedule({ selectedOption, specificDate, timeStart });\n\n    // check valid timeStart, timeEnd\n    const isValidTimeStart = timeStartOptions.some((timeItem) => timeItem.value === timeStart);\n    const isValidTimeEnd = timeEndOptions.some((timeItem) => timeItem.value === timeEnd);\n\n    // valid schedule time\n    if (isValidSchedule && isValidTimeStart && isValidTimeEnd) {\n      onConfirm({ selectedOption, specificDate, timeStart, timeEnd });\n      return;\n    }\n\n    setIsOpenPopup(true);\n  };\n\n  /**\n   * Handle dialog confirm\n   */\n  const handleDialogConfirm = () => {\n    setIsOpenPopup(false);\n\n    // Update time start by current time\n    const currentTime = moment().format('HH:mm');\n    let timeStart = getScheduleTimeStart();\n\n    // if current time > 21:45 => set schedule to tomorrow\n    if (currentTime > MAX_TIME_SET_SCHEDULE_TODAY) {\n      setDateOptions(convertDateOptions([TOMORROW, LATER]));\n      setSelectedOption(TOMORROW);\n      timeStart = DEFAULT_SCHEDULE_TIME_START;\n    }\n\n    setTimeStart(timeStart);\n    setTimeEnd(getDefaultTimeEnd(timeStart));\n  };\n\n  return (\n    <div className={`SetSchedule-area ${className}`}>\n      <div className=\"SetSchedule-container\">\n        <div className=\"SetSchedule-chooseDate\">\n          <div className=\"SetSchedule-listDates\">\n            <h5 className=\"SetSchedule-subLabel\">{lbDate}</h5>\n            <ButtonOptions\n              className=\"SetSchedule-options\"\n              value={selectedOption}\n              options={dateOptions}\n              onClick={handleChangeDateOption}\n            />\n          </div>\n          {selectedOption === LATER && (\n            <div className=\"SetSchedule-datePicker\">\n              <h5 className=\"SetSchedule-lb\">Datum wählen</h5>\n              <FormGroupDatePicker\n                disabled\n                placeholder=\"TT.MM.JJJJ\"\n                selected={specificDate}\n                value={specificDateValue}\n                minDate={defaultSpecificDate}\n                maxDate={maxSpecificDate}\n                onChange={handleChangeSpecificDate}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"SetSchedule-times\">\n          <h5 className=\"SetSchedule-lb\">{lbTime}</h5>\n          <div className=\"SetSchedule-timesOptions\">\n            <FormGroupSelect value={timeStart} options={timeStartOptions} onChange={handleChangeTime(true)} />\n            <span>und</span>\n            <FormGroupSelect value={timeEnd} options={timeEndOptions} onChange={handleChangeTime()} />\n          </div>\n        </div>\n      </div>\n      {isEditSchedule ? (\n        <div className=\"SetSchedule-actions\">\n          <HBButtonSmall onClick={handleConfirm}>Änderungen übernehmen</HBButtonSmall>\n        </div>\n      ) : (\n        <AppointmentBtnConfirm type=\"submit\" title=\"Speichern\" onClick={handleConfirm} />\n      )}\n      <HBModalConfirm\n        show={isOpenPopup}\n        handleClose={() => setIsOpenPopup(false)}\n        title=\"Information\"\n        content=\"Wir haben nicht genug Zeit, um Ihre Anfrage anzunehmen. Bitte wählen Sie die Zeit erneut\"\n        up=\"Verstanden\"\n        upCallback={handleDialogConfirm}\n      />\n    </div>\n  );\n};\n\nexport default SetSchedule;\n","export * from './user';\n","import { useMemo } from 'react';\n\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { RootState } from 'store';\nimport { updateProfile } from './actions';\n\nexport default function useAuth() {\n  const dispatch = useDispatch();\n  const authReducer = useSelector((state: RootState) => state.auth, shallowEqual);\n\n  return useMemo(\n    () => ({\n      ...authReducer,\n      updateProfile: (payload: any) => dispatch(updateProfile(payload)),\n    }),\n    [dispatch, authReducer],\n  );\n}\n","import React from 'react';\n\nimport { HBModal, HBButtonSmall } from 'hbBaseClass';\n\nimport './Dialog.scss';\n\nexport interface DialogPropTypes {\n  className?: string;\n  open: boolean;\n  title: string;\n  hasClose?: boolean;\n  description?: string;\n  btnConfirm?: string;\n  btnCancel?: string;\n  children?: React.ReactNode;\n  onConfirm?: (param?: any) => void;\n  onCancel?: () => void;\n  onClose?: () => void;\n}\n\nconst Dialog = (props: DialogPropTypes) => {\n  const {\n    className = '',\n    open,\n    title = '',\n    description = '',\n    hasClose,\n    btnConfirm,\n    btnCancel,\n    onConfirm = () => {},\n    onCancel = () => {},\n    onClose = () => {},\n    children,\n  } = props;\n\n  return (\n    <HBModal\n      className={`Dialog-container ${className}`}\n      centered\n      show={open}\n      closeBtn={hasClose}\n      onClose={onClose}\n      closeOnBackdrop={false}\n    >\n      <div className=\"Dialog-body\">\n        <h2 className=\"Dialog-title\">{title}</h2>\n        {description && <p className=\"Dialog-desc\">{description}</p>}\n        {children}\n      </div>\n      {(btnConfirm || btnCancel) && (\n        <div className=\"Dialog-actions\">\n          {btnConfirm && <HBButtonSmall onClick={onConfirm}>{btnConfirm}</HBButtonSmall>}\n          {btnCancel && (\n            <span className={btnConfirm && 'margin'} onClick={onCancel}>\n              {btnCancel}\n            </span>\n          )}\n        </div>\n      )}\n    </HBModal>\n  );\n};\n\nexport default Dialog;\n","import React, { useState, useEffect } from 'react';\nimport { isNil } from 'lodash';\n\nimport { InputTextArea } from 'components';\nimport Dialog, { DialogPropTypes } from './Dialog';\n\ninterface PropTypes extends DialogPropTypes {\n  maxLength?: number;\n}\n\nconst DialogTextArea = (props: PropTypes) => {\n  const { open, maxLength, onConfirm = () => {}, ...rest } = props;\n  const [value, setValue] = useState('');\n\n  useEffect(() => {\n    return () => {\n      if (!open) setValue('');\n    };\n  }, [open]);\n\n  /**\n   * Handle change input\n   *\n   * @param e React ChangeEvent\n   */\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value = '' } = e.target;\n\n    if (isNil(maxLength) || value.length <= maxLength) {\n      setValue(value);\n    }\n  };\n\n  /**\n   * Handle close dialog\n   */\n  const handleConfirm = () => {\n    onConfirm(value);\n  };\n\n  return (\n    <Dialog open={open} onConfirm={handleConfirm} {...rest}>\n      <InputTextArea className=\"Dialog-textArea\" value={value} maxLength={maxLength} onChange={handleChange} />\n    </Dialog>\n  );\n};\n\nexport default DialogTextArea;\n"],"sourceRoot":""}