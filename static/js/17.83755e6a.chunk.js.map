{"version":3,"sources":["views/user/meeting/Options.tsx","views/user/meeting/Meeting.tsx","views/user/meeting/components/ControlButton.tsx","views/user/meeting/components/MessageInput.tsx","views/user/meeting/components/RenderSwitch.tsx","views/user/meeting/AgoraVideoCall.tsx","views/user/meeting/configs.ts","views/user/meeting/RTMClient.ts"],"names":["Options","props","defaultAudio","audio","defaultVideo","video","joinMeeting","useState","setAudio","setVideo","contentClassname","backdropOpacity","show","onClose","closeOnBackdrop","centered","closeBtn","className","label","switchState","setSwitchState","onClick","LOADING","SETTING","CALLING","Meeting","Render","meetingId","match","params","id","configs","setConfigs","state","setState","AgoraVideoCall","leaveMeeting","style","minHeight","ControlButton","title","icon","isLeave","disabled","MessageInput","onSubmit","value","setValue","handleSubmit","e","preventDefault","placeholder","onChange","target","RenderSwitch","checked","AgoraRTC","Logger","setLogLevel","channel","appId","AGORA_APP_ID","token","AGORA_APP_TOKEN","client","useRef","localStream","shareClient","shareStream","uidRef","rtmClient","displayMode","streamList","setStreamList","readyState","setReadyState","configSharing","messages","setMessages","mainScreen","setMainScreen","addStream","useCallback","stream","push","some","item","getId","concat","streamInit","uid","videoProfile","config","defaultConfig","streamID","screen","createStream","setVideoProfile","subscribeStreamEvents","current","on","evt","console","log","Date","toLocaleTimeString","subscribe","err","removeStream","index","length","close","element","document","querySelector","parentNode","removeChild","tempList","splice","addMessage","msg","useLayoutEffect","clientConfig","mode","createClient","init","join","RTMClient","RTM_TOKEN","publish","useEffect","canvas","btnGroup","addEventListener","global","_toolbarToggle","clearTimeout","classList","add","setTimeout","remove","unpublish","leave","idx","map","dom","btnReverse","createElement","setAttribute","onclick","appendChild","play","player","resize","no","tile_canvas","setAudioVolume","setEffectsVolume","update","alt","src","display","gridGap","alignItems","justifyItems","gridTemplateRows","gridTemplateColumns","currentTarget","toggle","isVideoOn","disableVideo","enableVideo","isAudioOn","disableAudio","enableAudio","contains","message","sendChannelMessage","1","2","3","4","5","6","7","channelName","channels","_logined","accountName","this","AgoraRTM","createInstance","enableLogUpload","subscribeClientEvents","joinChannel","forEach","eventName","args","text","login","logout","name","createChannel","joined","subscribeChannelEvents","sendMessage","peerId","sendMessageToPeer","toString","memberId","queryPeersOnlineStatus"],"mappings":"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","file":"static/js/17.83755e6a.chunk.js","sourcesContent":["import { HBButtonFull, HBModal } from 'hbBaseClass';\nimport React, { useState } from 'react';\nimport { RenderSwitch } from './components';\nimport './Options.scss';\n\ninterface Props {\n  audio: boolean;\n  video: boolean;\n  joinMeeting: (audio: boolean, video: boolean) => void;\n}\n\nconst Options: React.FC<Props> = (props) => {\n  const { audio: defaultAudio, video: defaultVideo, joinMeeting } = props;\n\n  const [audio, setAudio] = useState(defaultAudio);\n  const [video, setVideo] = useState(defaultVideo);\n\n  const handleClickJoin = () => {\n    joinMeeting(audio, video);\n  };\n\n  return (\n    <HBModal\n      contentClassname=\"padding-small\"\n      backdropOpacity={0}\n      show={true}\n      onClose={() => {}}\n      closeOnBackdrop={false}\n      centered\n      closeBtn={true}\n    >\n      <div className=\"text-center\">\n        <h2 className=\"Options-title\">Teilnehmeroptionen</h2>\n        <RenderSwitch label=\"Ton einschalten\" switchState={audio} setSwitchState={setAudio} />\n        <div className=\"Options-hr\" />\n        <RenderSwitch label=\"Video einschalten\" switchState={video} setSwitchState={setVideo} />\n        <div className=\"Options-btn-join\">\n          <HBButtonFull onClick={handleClickJoin}>Teilnehmen</HBButtonFull>\n        </div>\n      </div>\n    </HBModal>\n  );\n};\n\nexport default Options;\n","import React, { useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport AgoraVideoCall from './AgoraVideoCall';\nimport Options from './Options';\nimport '../containers/Layout.scss';\n\nconst MEETING_STATES = {\n  LOADING: 0,\n  SETTING: 1,\n  CALLING: 2,\n};\n\nconst { LOADING, SETTING, CALLING } = MEETING_STATES;\n\nconst Meeting: React.FC<RouteComponentProps> = (props) => {\n  const params: any = props.match?.params;\n  const meetingId = params.id;\n\n  const [configs, setConfigs] = useState({ audio: false, video: true });\n  const [state, setState] = useState(SETTING);\n\n  const joinMeeting = (audio: boolean, video: boolean) => {\n    setConfigs({ audio, video });\n    setState(CALLING);\n  };\n\n  const leaveMeeting = () => {\n    setState(SETTING);\n  };\n\n  let Render;\n\n  switch (state) {\n    case LOADING:\n      Render = <div />;\n      break;\n\n    case SETTING:\n      Render = <Options {...configs} joinMeeting={joinMeeting} />;\n      break;\n\n    case CALLING:\n      Render = <AgoraVideoCall {...configs} meetingId={meetingId} leaveMeeting={leaveMeeting} />;\n      break;\n  }\n\n  return (\n    <div className=\"petrol\">\n      <div className=\"hb-background\" style={{ minHeight: '100vh' }}>\n        {Render}\n      </div>\n    </div>\n  );\n};\n\nexport default Meeting;\n","import React from 'react';\nimport './ControlButton.scss';\n\ninterface Props {\n  title: string;\n  icon: string;\n  className?: string;\n  onClick?: (e?: any) => void;\n  disabled?: boolean;\n  isLeave?: boolean;\n}\n\nconst ControlButton: React.FC<Props> = (props) => {\n  const { title, icon, onClick, isLeave, disabled, className = '' } = props;\n\n  return (\n    <span\n      title={title}\n      onClick={onClick}\n      className={`ControlButton__btn${disabled ? ' disabled' : ''}${isLeave ? ' leave' : ''} ${className}`}\n    >\n      <i className={`hb-icon-${icon} `} />\n    </span>\n  );\n};\n\nexport default ControlButton;\n","import React, { useState } from 'react';\nimport './MessageInput.scss';\n\ninterface Props {\n  onSubmit: any;\n}\n\nconst MessageInput: React.FC<Props> = (props) => {\n  const { onSubmit } = props;\n\n  const [value, setValue] = useState('');\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n    onSubmit(value);\n    setValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"MessageInput\">\n        <input placeholder=\"Antworten ...\" value={value} onChange={(e) => setValue(e.target.value)} />\n        <button>\n          <i className=\"hb-icon-send-2\" onClick={handleSubmit} />\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default MessageInput;\n","import { HBSwitch } from 'hbBaseClass';\nimport React from 'react';\nimport './RenderSwitch.scss';\n\ninterface Props {\n  label: string;\n  switchState: boolean;\n  setSwitchState: any;\n}\n\nconst RenderSwitch: React.FC<Props> = (props) => {\n  const { label, switchState, setSwitchState } = props;\n\n  return (\n    <div className=\"RenderSwitch-switch-wrapper\">\n      <h6 className=\"RenderSwitch-switch-wrapper__label\">{label}</h6>\n      <HBSwitch checked={switchState} onClick={() => setSwitchState(!switchState)} />\n    </div>\n  );\n};\n\nexport default RenderSwitch;\n","import React, { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport AgoraRTC from 'agora-rtc-sdk';\nimport { AGORA_APP_ID, AGORA_APP_TOKEN, RTM_TOKEN, tile_canvas } from './configs';\nimport RTMClient from './RTMClient';\nimport { MessageInput, ControlButton } from './components';\nimport './AgoraVideoCall.scss';\n\ndeclare var global: {\n  _toolbarToggle: any;\n};\n\nAgoraRTC.Logger.setLogLevel(4);\n\ninterface Props {\n  audio: boolean;\n  video: boolean;\n  meetingId: string;\n  leaveMeeting: () => void;\n}\n\nconst AgoraVideoCall: React.FC<Props> = (props) => {\n  const { audio, video, meetingId, leaveMeeting } = props;\n\n  const videoProfile = '480p_4';\n  const channel = meetingId;\n  const transcode = 'interop';\n  const appId = AGORA_APP_ID;\n  const token = AGORA_APP_TOKEN;\n  const uid = 528702;\n\n  const client = useRef<any>({});\n  const localStream = useRef<AgoraRTC.Stream | null | any>(null);\n  const shareClient = useRef<any>({});\n  const shareStream = useRef<any>({});\n  const uidRef = useRef('');\n  const rtmClient = useRef<RTMClient | null>(null);\n\n  const [displayMode, setDisplayMode] = useState('pip');\n  const [streamList, setStreamList] = useState<any[]>([]);\n  const [readyState, setReadyState] = useState(false);\n  const [configSharing, setConfigSharing] = useState(false);\n  const [messages, setMessages] = useState<any[]>([]);\n  const [mainScreen, setMainScreen] = useState(0);\n  const [volume, setVolume] = useState(100);\n\n  const handleChangeVolume = (e: any) => {\n    const newVolume = parseInt(e.target.value) * 0;\n    setVolume(newVolume);\n    localStream.current?.setAudioVolume(newVolume * 100);\n    localStream.current?.setEffectsVolume(newVolume * 100);\n  };\n\n  /**\n   * Add user to stream list\n   */\n  const addStream = useCallback((stream: any, push = false) => {\n    setStreamList((streamList: any[]) => {\n      let repeatition = streamList.some((item: any) => {\n        return item.getId() === stream.getId();\n      });\n      if (repeatition) {\n        return streamList;\n      }\n      if (push) {\n        return streamList.concat([stream]);\n      } else {\n        return [stream].concat(streamList);\n      }\n    });\n  }, []);\n\n  /**\n   * Init info of stream\n   */\n  const streamInit = useCallback((uid: string, videoProfile: any, config?: any) => {\n    let defaultConfig = {\n      streamID: uid,\n      audio,\n      video,\n      screen: false,\n    };\n\n    let stream = AgoraRTC.createStream(defaultConfig);\n    stream.setVideoProfile(videoProfile);\n    return stream;\n  }, []);\n\n  /**\n   * Listening event join, leave room\n   */\n  const subscribeStreamEvents = useCallback(() => {\n    client.current.on('stream-added', (evt: any) => {\n      let stream = evt.stream;\n      console.log('New stream added: ' + stream.getId());\n      setMessages([...messages, 'New stream added: ' + stream.getId()]);\n      console.log('At ' + new Date().toLocaleTimeString());\n      console.log('Subscribe ', stream);\n      client.current.subscribe(stream, (err: any) => {\n        console.log('Subscribe stream failed', err);\n      });\n    });\n\n    client.current.on('peer-leave', (evt: any) => {\n      console.log('Peer has left: ' + evt.uid);\n      console.log(new Date().toLocaleTimeString());\n      console.log(evt);\n      removeStream(evt.uid);\n    });\n\n    client.current.on('stream-subscribed', (evt: any) => {\n      let stream = evt.stream;\n      console.log('Got stream-subscribed event');\n      console.log(new Date().toLocaleTimeString());\n      console.log('Subscribe remote stream successfully: ' + stream.getId());\n      console.log(evt);\n      addStream(stream);\n    });\n\n    client.current.on('stream-removed', (evt: any) => {\n      let stream = evt.stream;\n      console.log('Stream removed: ' + stream.getId());\n      console.log(new Date().toLocaleTimeString());\n      console.log(evt);\n      removeStream(stream.getId());\n    });\n  }, []);\n\n  /**\n   * Remove user from stream when user leave\n   */\n  const removeStream = useCallback((uid: string) => {\n    setStreamList((streamList: any[]) => {\n      for (let index = 0; index < streamList.length; index++) {\n        const item = streamList[index];\n\n        if (item.getId() === uid) {\n          item.close();\n          let element = document.querySelector('#ag-item-' + uid);\n          if (element) {\n            element?.parentNode?.removeChild(element);\n          }\n          let tempList = [...streamList];\n          tempList.splice(index, 1);\n          return tempList;\n        }\n      }\n      return streamList;\n    });\n  }, []);\n\n  const handleCamera = (e: any) => {\n    e.currentTarget.classList.toggle('off');\n    localStream.current?.isVideoOn() ? localStream.current?.disableVideo() : localStream.current?.enableVideo();\n  };\n\n  const handleMic = (e: any) => {\n    e.currentTarget.classList.toggle('off');\n    localStream.current?.isAudioOn() ? localStream.current.disableAudio() : localStream.current?.enableAudio();\n  };\n\n  const switchDisplay = (e: any) => {\n    if (e.currentTarget.classList.contains('disabled') || streamList.length <= 1) {\n      return;\n    }\n\n    if (displayMode === 'pip') {\n      setDisplayMode('tile');\n    } else if (displayMode === 'tile') {\n      setDisplayMode('pip');\n    } else if (displayMode === 'share') {\n      // do nothing or alert, tbd\n    } else {\n      console.error('Display Mode can only be tile/pip/share');\n    }\n  };\n\n  const hideRemote = (e: any) => {\n    if (e.currentTarget.classList.contains('disabled') || streamList.length <= 1) {\n      return;\n    }\n    let list;\n    let id = streamList[streamList.length - 1].getId();\n    list = Array.from(document.querySelectorAll(`.ag-item:not(#ag-item-${id})`));\n    list.map((item: any) => {\n      if (item.style.display !== 'none') {\n        item.style.display = 'none';\n      } else {\n        item.style.display = 'block';\n      }\n    });\n  };\n\n  const handleExit = (e: any) => {\n    if (e.currentTarget.classList.contains('disabled')) {\n      return;\n    }\n    try {\n      client.current?.unpublish(localStream);\n      localStream.current?.close();\n      if (configSharing) {\n        shareClient.current?.unpublish(shareStream);\n        shareStream.current?.close();\n      }\n      client.current?.leave(\n        () => {\n          console.log('Client succeed to leave.');\n        },\n        () => {\n          console.log('Client failed to leave.');\n        },\n      );\n    } finally {\n      setReadyState(false);\n      client.current = null;\n      localStream.current = null;\n      leaveMeeting();\n    }\n  };\n\n  // const sharingScreen = (e: any) => {\n  //   if (configSharing) {\n  //     shareClient.current?.unpublish(shareStream);\n  //     shareStream.current?.close();\n  //     setConfigSharing(false);\n  //   } else {\n  //     setConfigSharing(true);\n  //     // init AgoraRTC local client\n  //     const clientConfig: any = { mode: transcode };\n  //     shareClient.current = AgoraRTC.createClient(clientConfig);\n  //     shareClient.current?.init(configs.appId, () => {\n  //       console.log('AgoraRTC client initialized');\n  //       subscribeStreamEvents();\n  //       shareClient.current?.join(appId, channel, uid, (uid: string) => {\n  //         uidRef.current = uid;\n  //         console.log('User ' + uid + ' join channel successfully');\n  //         console.log('At ' + new Date().toLocaleTimeString());\n  //         // create local stream\n  //         // It is not recommended to setConfig in function addStream\n  //         shareStream.current = streamInitSharing(uid, videoProfile);\n  //         shareStream.current?.init(\n  //           () => {\n  //             if (video) {\n  //               addStream(shareStream.current, true);\n  //               shareClient.current?.publish(shareStream.current, (err: any) => {\n  //                 console.log('Publish local stream error: ' + err);\n  //               });\n  //             }\n  //             setReadyState(true);\n  //           },\n  //           (err: any) => {\n  //             console.log('getUserMedia failed', err);\n  //             setReadyState(true);\n  //           },\n  //         );\n  //       });\n  //     });\n  //   }\n  // };\n\n  // const streamInitSharing = (uid: string, videoProfile: any, config?: any) => {\n  //   let defaultConfig = {\n  //     streamID: uid,\n  //     audio: true,\n  //     video: false,\n  //     screen: true,\n  //   };\n\n  //   let stream = AgoraRTC.createStream(defaultConfig);\n  //   stream.setVideoProfile(videoProfile);\n  //   return stream;\n  // };\n\n  const addMessage = (msg: string) => setMessages((messages) => [...messages, msg]);\n\n  useLayoutEffect(() => {\n    // init AgoraRTC local client\n    const clientConfig: any = { mode: transcode };\n    client.current = AgoraRTC.createClient(clientConfig);\n\n    client.current.init(appId, () => {\n      console.log('AgoraRTC client initialized');\n      subscribeStreamEvents();\n      client.current.join(token, channel, uid, (uid: string) => {\n        uidRef.current = uid;\n        console.log('User ' + uid + ' join channel successfully');\n        console.log('At ' + new Date().toLocaleTimeString());\n\n        rtmClient.current = new RTMClient(appId, uid, 'test', RTM_TOKEN, addMessage);\n\n        // create local stream\n        // It is not recommended to setConfig in function addStream\n        localStream.current = streamInit(uid, videoProfile);\n        localStream.current?.init(\n          () => {\n            if (video) {\n              console.log(localStream.current);\n              addStream(localStream.current, true);\n              client.current.publish(localStream.current, (err: any) => {\n                console.log('Publish local stream error: ' + err);\n              });\n            }\n            setReadyState(true);\n          },\n          (err: any) => {\n            console.log('getUserMedia failed', err);\n            setReadyState(true);\n          },\n        );\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    let canvas = document.querySelector('#ag-canvas');\n    let btnGroup = document.querySelector('.ag-btn-group');\n    canvas?.addEventListener('mousemove', () => {\n      if (global._toolbarToggle) {\n        clearTimeout(global._toolbarToggle);\n      }\n      btnGroup?.classList.add('active');\n      global._toolbarToggle = setTimeout(function () {\n        btnGroup?.classList.remove('active');\n      }, 2000);\n    });\n\n    return () => {\n      client.current?.unpublish(localStream.current);\n      localStream.current?.close();\n      if (configSharing) {\n        shareClient.current?.unpublish(shareStream.current);\n        shareStream.current?.close();\n      }\n      client.current?.leave(\n        () => {\n          console.log('Client succeed to leave.');\n        },\n        () => {\n          console.log('Client failed to leave.');\n        },\n      );\n    };\n  }, []);\n\n  const update = () => {\n    // rerendering\n    let canvas = document.querySelector('#ag-canvas');\n    // pip mode (can only use when less than 4 people in channel)\n    if (displayMode === 'pip') {\n      let no = streamList.length;\n      // if (no > 4) {\n      //   setDisplayMode('tile');\n      //   return;\n      // }\n\n      let idx = 0;\n\n      streamList.map((item, index) => {\n        let id = item.getId();\n        let dom = document.querySelector('#ag-item-' + id);\n        let btnReverse: any = document.querySelector('#ag-item-btn-reverse-' + id);\n\n        if (!dom) {\n          dom = document.createElement('section');\n          dom.setAttribute('id', 'ag-item-' + id);\n\n          btnReverse = document.createElement('button');\n          btnReverse.setAttribute('id', 'ag-item-btn-reverse-' + id);\n          btnReverse.setAttribute('class', 'AgoraVideoCall-btn-reverse');\n          btnReverse.onclick = () => setMainScreen((mainScreen) => 1 - mainScreen);\n          dom.appendChild(btnReverse);\n          const icon = document.createElement('i');\n          icon.setAttribute('class', 'hb-icon-refresh-ccw');\n          btnReverse.appendChild(icon);\n\n          canvas?.appendChild(dom);\n          item.play('ag-item-' + id);\n        }\n        if (index === mainScreen) {\n          dom.setAttribute('style', 'position:relative; grid-area: 1/1/5/5');\n          dom.setAttribute('class', 'ag-item');\n          btnReverse.setAttribute('style', 'visibility: hidden');\n        } else {\n          dom.setAttribute('class', 'ag-item small');\n          dom.setAttribute(\n            'style',\n            `position:relative; grid-area: span 1/span 1/${5 - idx}/5; z-index: 1; padding: 0 19px 17px 0`,\n          );\n          btnReverse.setAttribute('style', 'visibility: visible');\n          idx += 1;\n        }\n\n        item.player?.resize?.();\n      });\n    }\n    // tile mode\n    else if (displayMode === 'tile') {\n      let no = streamList.length;\n      streamList.map((item, index) => {\n        let id = item.getId();\n        let dom = document.querySelector('#ag-item-' + id);\n        if (!dom) {\n          dom = document.createElement('section');\n          dom.setAttribute('id', 'ag-item-' + id);\n          dom.setAttribute('class', 'ag-item');\n          canvas?.appendChild(dom);\n          item.play('ag-item-' + id);\n        }\n        dom.setAttribute('style', `grid-area: ${tile_canvas[no][index]}`);\n        item.player.resize && item.player.resize();\n      });\n    }\n    // screen share mode (tbd)\n    else if (displayMode === 'share') {\n    }\n\n    localStream.current?.setAudioVolume(0);\n    localStream.current?.setEffectsVolume(0);\n  };\n\n  update();\n\n  const style = {\n    display: 'grid',\n    gridGap: '10px',\n    alignItems: 'center',\n    justifyItems: 'center',\n    gridTemplateRows: 'repeat(4, auto)',\n    gridTemplateColumns: 'repeat(4, auto)',\n  };\n\n  // const switchDisplayBtn = (\n  //   <span\n  //     onClick={switchDisplay}\n  //     className={\n  //       streamList.length > 4\n  //         ? 'AgoraVideoCall-btn-group__btn displayModeBtn disabled'\n  //         : 'AgoraVideoCall-btn-group__btn displayModeBtn'\n  //     }\n  //     title=\"Switch Display Mode\"\n  //   >\n  //     <i className=\"ag-icon ag-icon-switch-display\"></i>\n  //   </span>\n  // );\n\n  // const hideRemoteBtn = (\n  //   <span\n  //     className={\n  //       streamList.length > 4 || displayMode !== 'pip'\n  //         ? 'AgoraVideoCall-btn-group__btn disableRemoteBtn disabled'\n  //         : 'AgoraVideoCall-btn-group__btn disableRemoteBtn'\n  //     }\n  //     onClick={hideRemote}\n  //     title=\"Hide Remote Stream\"\n  //   >\n  //     <i className=\"ag-icon ag-icon-remove-pip\"></i>\n  //   </span>\n  // );\n\n  return (\n    <div className=\"hb-wrapper\">\n      <div className=\"wrapper meeting\">\n        <div className=\"row AgoraVideoCall\">\n          <div className=\"col-md-8\">\n            <div className=\"ag-main\">\n              <div className=\"AgoraVideoCall-info\">\n                <div className=\"AgoraVideoCall-info-nurse\">\n                  <img\n                    alt=\"avatar\"\n                    src=\"https://petmaster.vn/petroom/wp-content/uploads/2020/03/cho-corgi-4.jpg\"\n                    className=\"AgoraVideoCall-info-nurse__avatar\"\n                  />\n                  <div className=\"AgoraVideoCall-info-nurse__name\">\n                    <h3>Pflegeberatung</h3>\n                    <span>Maxima Mustermann</span>\n                  </div>\n                </div>\n                <div className=\"AgoraVideoCall-info-time\">\n                  <div className=\"AgoraVideoCall-info-time__ellipse\" />\n                  <span>09:30</span>\n                </div>\n              </div>\n              <div className=\"ag-container\">\n                <div id=\"ag-canvas\" style={style} />\n              </div>\n              <div className=\"AgoraVideoCall-btn-group\">\n                <div className=\"AgoraVideoCall-btn-group__left\">\n                  <ControlButton\n                    className=\"btn-toggle-camera\"\n                    icon=\"meeting-camera-2\"\n                    title=\"Turn on/off Camera\"\n                    onClick={handleCamera}\n                  />\n                  <ControlButton\n                    className=\"btn-toggle-micro\"\n                    icon=\"meeting-mic-2\"\n                    title=\"Turn on/off Mic\"\n                    onClick={handleMic}\n                  />\n                  <ControlButton className=\"btn-toggle-volume\" icon=\"meeting-volume-high\" title=\"Volume\" />\n                  <ControlButton icon=\"arrows-expand\" title=\"Fullscreen\" />\n                </div>\n                <ControlButton icon=\"call-decline\" title=\"Leave\" isLeave disabled={!readyState} onClick={handleExit} />\n                {/* {\n                  <span\n                    onClick={sharingScreen}\n                    className=\"AgoraVideoCall-btn-group__btn shareScreenBtn\"\n                    title=\"Share/unShare Screen\"\n                  >\n                    <i className=\"ag-icon ag-icon-screen-share\"></i>\n                  </span>\n                }\n                {switchDisplayBtn}\n                {hideRemoteBtn} */}\n              </div>\n              {/* <input type=\"range\" onChange={handleChangeVolume} max=\"100\" value={volume} /> */}\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"AgoraVideoCall-messages\">\n              <h3 className=\"AgoraVideoCall-messages__header\">Chat</h3>\n              <div className=\"AgoraVideoCall-messages__body\">\n                <div>\n                  {messages.map((item: { uid: string; message: string }) => (\n                    <div>\n                      {item.uid}: {item.message}\n                    </div>\n                  ))}\n                </div>\n                <MessageInput onSubmit={(value: string) => rtmClient.current?.sendChannelMessage(value)} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AgoraVideoCall;\n","export const AGORA_APP_ID = '8d7e950852c341c7b2050e83261bde49';\nexport const AGORA_APP_TOKEN =\n  '0068d7e950852c341c7b2050e83261bde49IAAkvRCmrg8Sj4ACxWw647qgfIkBY9pG3TsWFnQKlE11qmAGdlZzmL49IgDPLF0BuOH3YAQAAQBInvZgAgBInvZgAwBInvZgBABInvZg';\nexport const RTM_TOKEN =\n  '0068d7e950852c341c7b2050e83261bde49IABi55qfhg8hpfgPK10BF78vhwqmLpIVbmJoXLbdMcjm3sgVYfUAAAAAEADw+ZoDyeX3YAEA6ANZovZg';\n\nexport const tile_canvas: any = {\n  1: ['span 12/span 24'],\n  2: ['span 12/span 12/13/25', 'span 12/span 12/13/13'],\n  3: ['span 6/span 12', 'span 6/span 12', 'span 6/span 12/7/19'],\n  4: ['span 6/span 12', 'span 6/span 12', 'span 6/span 12', 'span 6/span 12/7/13'],\n  5: [\n    'span 3/span 4/13/9',\n    'span 3/span 4/13/13',\n    'span 3/span 4/13/17',\n    'span 3/span 4/13/21',\n    'span 9/span 16/10/21',\n  ],\n  6: [\n    'span 3/span 4/13/7',\n    'span 3/span 4/13/11',\n    'span 3/span 4/13/15',\n    'span 3/span 4/13/19',\n    'span 3/span 4/13/23',\n    'span 9/span 16/10/21',\n  ],\n  7: [\n    'span 3/span 4/13/5',\n    'span 3/span 4/13/9',\n    'span 3/span 4/13/13',\n    'span 3/span 4/13/17',\n    'span 3/span 4/13/21',\n    'span 3/span 4/13/25',\n    'span 9/span 16/10/21',\n  ],\n};\n","import AgoraRTM from 'agora-rtm-sdk';\n\nexport default class RTMClient {\n  channels: any;\n  _logined: boolean;\n  client: any;\n  accountName: string;\n  addMessage: any;\n\n  constructor(appId: string, uid: string, channelName: string, token: string, addMessage: any) {\n    this.channels = {};\n    this._logined = false;\n    this.accountName = '';\n    this.client = AgoraRTM.createInstance(appId, { enableLogUpload: false });\n    this.subscribeClientEvents();\n    this.joinChannel(channelName, uid, token);\n    this.addMessage = addMessage;\n  }\n\n  // subscribe client events\n  subscribeClientEvents() {\n    const clientEvents = ['ConnectionStateChanged', 'MessageFromPeer'];\n    clientEvents.forEach((eventName) => {\n      // this.client.on(eventName, (...args: any) => {\n      //   console.log('emit ', eventName, ...args);\n      //   this.addMessage({ uid: args[1], message: args[0].text });\n      // });\n    });\n  }\n\n  // subscribe channel events\n  subscribeChannelEvents(channelName: string) {\n    const channelEvents = ['MemberJoined', 'MemberLeft'];\n    channelEvents.forEach((eventName) => {\n      this.channels[channelName].channel.on(eventName, (...args: any) => {\n        console.log('emit ', eventName, args);\n        this.addMessage({ uid: 'System', message: args });\n      });\n    });\n    this.channels[channelName].channel.on('ChannelMessage', (...args: any) => {\n      console.log('emit ', 'ChannelMessage', args);\n      this.addMessage({ uid: args[1], message: args[0].text });\n    });\n  }\n\n  async login(accountName: string, token: string) {\n    this.accountName = 'HB-' + accountName;\n    return this.client.login({ uid: this.accountName, token });\n  }\n\n  async logout() {\n    return this.client.logout();\n  }\n\n  async joinChannel(name: string, uid: string, token: string) {\n    await this.login(uid, token);\n    const channel = this.client.createChannel(name);\n    this.channels[name] = {\n      channel,\n      joined: false, // channel state\n    };\n    this.subscribeChannelEvents(name);\n    return channel.join();\n  }\n\n  async leaveChannel(name: string) {\n    console.log('leaveChannel', name);\n    if (!this.channels[name] || (this.channels[name] && !this.channels[name].joined)) return;\n    return this.channels[name].channel.leave();\n  }\n\n  async sendChannelMessage(text: string, channelName: string = 'test') {\n    // if (!this.channels[channelName] || !this.channels[channelName].joined) return;\n    this.addMessage({ uid: this.accountName, message: text });\n    return this.channels[channelName].channel.sendMessage({ text });\n  }\n\n  async sendPeerMessage(text: string, peerId: string) {\n    console.log('sendPeerMessage', text, peerId);\n    return this.client.sendMessageToPeer({ text }, peerId.toString());\n  }\n\n  async queryPeersOnlineStatus(memberId: string) {\n    console.log('queryPeersOnlineStatus', memberId);\n    return this.client.queryPeersOnlineStatus([memberId]);\n  }\n\n  //send image\n  // async uploadImage(blob, peerId) {\n  //   const mediaMessage = await this.client.createMediaMessageByUploading(blob, {\n  //     messageType: 'IMAGE',\n  //     fileName: 'agora.jpg',\n  //     description: 'send image',\n  //     thumbnail: blob,\n  //     // width: 100,\n  //     // height: 200,\n  //     // thumbnailWidth: 50,\n  //     // thumbnailHeight: 200,\n  //   });\n  //   return this.client.sendMessageToPeer(mediaMessage, peerId);\n  // }\n\n  // async sendChannelMediaMessage(blob, channelName) {\n  //   console.log('sendChannelMessage', blob, channelName);\n  //   if (!this.channels[channelName] || !this.channels[channelName].joined) return;\n  //   const mediaMessage = await this.client.createMediaMessageByUploading(blob, {\n  //     messageType: 'IMAGE',\n  //     fileName: 'agora.jpg',\n  //     description: 'send image',\n  //     thumbnail: blob,\n  //     // width: 100,\n  //     // height: 200,\n  //     // thumbnailWidth: 50,\n  //     // thumbnailHeight: 200,\n  //   });\n  //   return this.channels[channelName].channel.sendMessage(mediaMessage);\n  // }\n\n  // async cancelImage(message) {\n  //   const controller = new AbortController();\n  //   setTimeout(() => controller.abort(), 1000);\n  //   await this.client.downloadMedia(message.mediaId, {\n  //     cancelSignal: controller.signal,\n  //     onOperationProgress: ({ currentSize, totalSize }) => {\n  //       console.log(currentSize, totalSize);\n  //     },\n  //   });\n  // }\n}\n"],"sourceRoot":""}