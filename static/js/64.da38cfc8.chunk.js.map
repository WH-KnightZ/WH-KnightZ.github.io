{"version":3,"sources":["views/admin/settings/constants.ts","views/admin/settings/ModalCreateMessage.tsx","views/admin/settings/ModalUpdateMessage.tsx","views/admin/settings/SettingMessages.tsx","views/admin/containers/FieldName.tsx"],"names":["APICode","statuses","colors","success","error","warning","validationSchema","values","data","Yup","shape","message_id","required","notOneOf","map","value","toString","text","text_de","descriptions","validate","getValidationSchema","validationSchemas","validateSync","abortEarly","getErrorsFromValidationError","ModalCreateMessage","props","callApi","useApi","reload","handleClose","show","initialValues","className","size","centered","onClose","closeOnBackdrop","closeButton","md","enableReinitialize","onSubmit","newValues","popup","status","trim","duration","parseInt","body","JSON","stringify","method","api","config","rest","createMessage","loading","msg","messages","createMessageFailure","response","SUCCESS","errors","touched","dirty","handleChange","handleBlur","handleSubmit","isValid","FieldName","label","width","placeholder","onChange","e","test","target","name","invalid","onBlur","maxLength","type","rows","min","step","disabled","color","ModalUpdateMessage","updateMessage","updateMessageFailure","SettingMessages","useState","isLoading","setIsLoading","search","setSearch","setPopup","setStatus","setData","createModalData","setCreateModalData","updateModalData","setUpdateModalData","fields","useMemo","key","_style","renderContent","item","style","fontWeight","variant","onClick","useCallback","getAllMessages","data1","sort","x","y","useEffect","noItems","popupBool","filteredData","searchLowerCase","toLowerCase","filter","includes","length","marginTop","display","flexDirection","marginBottom","position","paddingLeft","left","top","textAlign","flex","items","noItemsViewSlot","hover","striped","sorter","sorterValue","column","desc","scopedSlots","renderFields","marginRight","children","minWidth"],"mappings":"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","file":"static/js/64.da38cfc8.chunk.js","sourcesContent":["export const statuses: any = ['success', 'error', 'warning'];\nexport const colors: any = { success: '#006644', error: '#BF2600', warning: '#DF6B00' };\nexport enum APICode {\n  Success = 200,\n}\n\nexport const APP_EVENT = {\n  VIDEO_STATUS: \"VIDEO_STATUS\"\n};","import React from 'react';\nimport {\n  CCol,\n  CRow,\n  CModalBody,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CForm,\n  CInput,\n  CFormGroup,\n  CSelect,\n  CTextarea,\n  CInvalidFeedback,\n} from '@coreui/react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport config from '../../../config';\nimport { statuses } from './constants';\nimport { SUCCESS } from '../../../store/callApi/actions';\nimport { getErrorsFromValidationError } from '../../../utils';\nimport FieldName from '../containers/FieldName';\nimport { CModal, CModalHeader } from '../../../components';\nimport { useApi } from 'store/callApi';\n\nconst validationSchema = function (values: any, data: any) {\n  return Yup.object().shape({\n    message_id: Yup.string()\n      .required('Required.')\n      .notOneOf(\n        data.map((value: any) => value.message_id.toString()),\n        'This message id already exists. Please choose another message id.',\n      ),\n    text: Yup.string().required('Required.'),\n    text_de: Yup.string().required('Required.'),\n    descriptions: Yup.string().required('Required.'),\n  });\n};\n\nconst validate = (getValidationSchema: any, data: any) => {\n  return (values: any) => {\n    const validationSchemas = getValidationSchema(values, data);\n    try {\n      validationSchemas.validateSync(values, { abortEarly: false });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\ninterface Props {\n  reload: () => void;\n  handleClose: () => void;\n  show: boolean;\n  initialValues: any;\n  data: any;\n}\n\nconst ModalCreateMessage: React.FC<Props> = (props) => {\n  const { callApi } = useApi();\n\n  const { reload, handleClose, show, initialValues, data } = props;\n\n  const onSubmit = (values: {\n    message_id: string;\n    popup: any;\n    status: string;\n    text: string;\n    text_de: string;\n    duration: string;\n    descriptions: string;\n  }) => {\n    const newValues = {\n      message_id: values.message_id,\n      popup: values.popup === 'true' || values.popup === true ? true : false,\n      status: values.status,\n      text: values.text.trim(),\n      text_de: values.text_de.trim(),\n      duration: values.popup === 'false' ? 0 : parseInt(values.duration),\n      descriptions: values.descriptions.trim(),\n    };\n    const body = JSON.stringify(newValues);\n    callApi(\n      {\n        method: 'post',\n        api: config.rest.createMessage(),\n        body: body,\n        loading: true,\n        msg: config.messages.createMessageFailure,\n      },\n      (response) => {\n        const { status } = response;\n        if (status === SUCCESS) {\n          reload();\n          handleClose();\n        }\n      },\n    );\n  };\n\n  return (\n    <div className=\"flex-row align-items-center\">\n      <CModal size=\"lg\" centered show={show} onClose={handleClose} closeOnBackdrop={false}>\n        <CModalHeader closeButton>Create Message</CModalHeader>\n        <CModalBody className=\"popup--update-user\">\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"12\">\n              <CCardGroup>\n                <CCard className=\"popup--update-user__card--wrapper\">\n                  <CCardBody>\n                    <Formik\n                      enableReinitialize={true}\n                      initialValues={initialValues}\n                      validate={validate(validationSchema, data)}\n                      onSubmit={onSubmit}\n                    >\n                      {({ values, errors, touched, dirty, handleChange, handleBlur, handleSubmit, isValid }) => (\n                        <CForm onSubmit={handleSubmit}>\n                          <FieldName label=\"Message Id\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                placeholder=\"Message Id\"\n                                value={values.message_id}\n                                onChange={(e: any) => {\n                                  if (/^[0-9]*$/.test(e.target.value)) handleChange(e);\n                                }}\n                                name=\"message_id\"\n                                invalid={values.message_id !== '' && touched.message_id && !!errors.message_id}\n                                onBlur={handleBlur}\n                              />\n                              <CInvalidFeedback>{errors.message_id}</CInvalidFeedback>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Popup\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CSelect value={values.popup} onChange={handleChange} name=\"popup\">\n                                <option>true</option>\n                                <option>false</option>\n                              </CSelect>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Status\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CSelect value={values.status} onChange={handleChange} name=\"status\">\n                                {statuses.map((value: string) => (\n                                  <option key={value}>{value}</option>\n                                ))}\n                              </CSelect>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"English Message\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CTextarea\n                                required\n                                maxLength={200}\n                                type=\"text\"\n                                placeholder=\"English Message\"\n                                value={values.text}\n                                name=\"text\"\n                                onChange={handleChange}\n                                rows={3}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"German Message\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CTextarea\n                                required\n                                maxLength={200}\n                                type=\"text\"\n                                placeholder=\"German Message\"\n                                value={values.text_de}\n                                name=\"text_de\"\n                                onChange={handleChange}\n                                rows={3}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Duration\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                type=\"number\"\n                                min={1}\n                                step={1}\n                                disabled={values.popup === 'false'}\n                                placeholder=\"Duration\"\n                                value={values.popup === 'false' ? 0 : values.duration}\n                                name=\"duration\"\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Description\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CTextarea\n                                type=\"text\"\n                                placeholder=\"Description\"\n                                value={values.descriptions}\n                                name=\"descriptions\"\n                                maxLength={200}\n                                onChange={handleChange}\n                                rows={3}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <CFormGroup className=\"d-flex justify-content-end mb-0\">\n                            <CButton color=\"primary\" className=\"px-4\" type=\"submit\" disabled={!(isValid && dirty)}>\n                              Create\n                            </CButton>\n                          </CFormGroup>\n                        </CForm>\n                      )}\n                    </Formik>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CModalBody>\n      </CModal>\n    </div>\n  );\n};\n\nexport default ModalCreateMessage;\n","import React from 'react';\nimport {\n  CCol,\n  CRow,\n  CModalBody,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CForm,\n  CInput,\n  CTextarea,\n  CFormGroup,\n  CSelect,\n} from '@coreui/react';\nimport { Formik } from 'formik';\nimport config from '../../../config';\nimport { SUCCESS } from '../../../store/callApi/actions';\nimport { statuses } from './constants';\nimport FieldName from '../containers/FieldName';\nimport * as Yup from 'yup';\nimport { getErrorsFromValidationError } from '../../../utils';\nimport { CModal, CModalHeader } from '../../../components';\nimport { useApi } from 'store/callApi';\n\ninterface Props {\n  reload: () => void;\n  handleClose: () => void;\n  show: boolean;\n  initialValues: any;\n}\n\nconst validationSchema = function (values: any) {\n  return Yup.object().shape({\n    text: Yup.string().required('Required.'),\n    text_de: Yup.string().required('Required.'),\n    descriptions: Yup.string().required('Required.'),\n  });\n};\n\nconst validate = (getValidationSchema: any) => {\n  return (values: any) => {\n    const validationSchemas = getValidationSchema(values);\n    try {\n      validationSchemas.validateSync(values, { abortEarly: false });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nconst ModalUpdateMessage: React.FC<Props> = (props) => {\n  const { callApi } = useApi();\n\n  const { reload, handleClose, show, initialValues } = props;\n\n  const onSubmit = (values: {\n    message_id: string;\n    popup: any;\n    status: string;\n    text: string;\n    text_de: string;\n    duration: string;\n    descriptions: string;\n  }) => {\n    const newValues = {\n      popup: values.popup === 'true' || values.popup === true ? true : false,\n      status: values.status,\n      text: values.text.trim(),\n      text_de: values.text_de.trim(),\n      duration: values.popup === 'false' ? 0 : parseInt(values.duration),\n      descriptions: values.descriptions.trim(),\n    };\n    const body = JSON.stringify(newValues);\n    callApi(\n      {\n        method: 'put',\n        api: config.rest.updateMessage(values.message_id),\n        body: body,\n        loading: true,\n        msg: config.messages.updateMessageFailure,\n      },\n      (response) => {\n        const { status } = response;\n        if (status === SUCCESS) {\n          reload();\n          handleClose();\n        }\n      },\n    );\n  };\n\n  return (\n    <div className=\"flex-row align-items-center\">\n      <CModal size=\"lg\" centered show={show} onClose={handleClose} closeOnBackdrop={false}>\n        <CModalHeader closeButton>Update Message</CModalHeader>\n        <CModalBody className=\"popup--update-user\">\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"12\">\n              <CCardGroup>\n                <CCard className=\"popup--update-user__card--wrapper\">\n                  <CCardBody>\n                    <Formik\n                      enableReinitialize={true}\n                      initialValues={initialValues}\n                      validate={validate(validationSchema)}\n                      onSubmit={onSubmit}\n                    >\n                      {({ values, dirty, handleChange, handleSubmit, isValid }) => (\n                        <CForm onSubmit={handleSubmit}>\n                          <FieldName label=\"Message Id\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput disabled type=\"number\" value={values.message_id} name=\"message_id\" />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Popup\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CSelect value={values.popup} onChange={handleChange} name=\"popup\">\n                                <option>true</option>\n                                <option>false</option>\n                              </CSelect>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Status\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CSelect value={values.status} onChange={handleChange} name=\"status\">\n                                {statuses.map((value: string) => (\n                                  <option key={value}>{value}</option>\n                                ))}\n                              </CSelect>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"English Message\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CTextarea\n                                required\n                                maxLength={200}\n                                type=\"text\"\n                                placeholder=\"English Message\"\n                                value={values.text}\n                                name=\"text\"\n                                onChange={handleChange}\n                                rows={3}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"German Message\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CTextarea\n                                required\n                                maxLength={200}\n                                type=\"text\"\n                                placeholder=\"German Message\"\n                                value={values.text_de}\n                                name=\"text_de\"\n                                onChange={handleChange}\n                                rows={3}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Duration\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                type=\"number\"\n                                min={1}\n                                disabled={values.popup === 'false' || !values.popup}\n                                placeholder=\"Duration\"\n                                value={values.popup === 'false' || !values.popup ? 0 : values.duration}\n                                name=\"duration\"\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Description\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CTextarea\n                                type=\"text\"\n                                placeholder=\"Description\"\n                                value={values.descriptions}\n                                name=\"descriptions\"\n                                maxLength={200}\n                                onChange={handleChange}\n                                rows={3}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <CFormGroup className=\"d-flex justify-content-end mb-0\">\n                            <CButton color=\"primary\" className=\"px-4\" type=\"submit\" disabled={!(isValid && dirty)}>\n                              Update\n                            </CButton>\n                          </CFormGroup>\n                        </CForm>\n                      )}\n                    </Formik>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CModalBody>\n      </CModal>\n    </div>\n  );\n};\n\nexport default ModalUpdateMessage;\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { CDataTable, CButton, CInput, CSelect } from '@coreui/react';\nimport config from '../../../config';\nimport { SUCCESS } from '../../../store/callApi/actions';\nimport { statuses, colors } from './constants';\nimport ModalCreateMessage from './ModalCreateMessage';\nimport ModalUpdateMessage from './ModalUpdateMessage';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { renderFields } from '../../../extensions';\nimport { useApi } from 'store/callApi';\n\nconst SettingMessages: React.FC<RouteComponentProps> = () => {\n  const { callApi } = useApi();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [search, setSearch] = useState('');\n  const [popup, setPopup] = useState('');\n  const [status, setStatus] = useState('');\n  const [data, setData] = useState([]);\n  const [createModalData, setCreateModalData] = useState({ show: false, initialValues: {} });\n  const [updateModalData, setUpdateModalData] = useState({ show: false, initialValues: {} });\n\n  const fields = useMemo(\n    () => [\n      { key: 'message_id', label: 'Id', _style: { width: '5%' } },\n      {\n        key: 'popup',\n        label: 'Popup',\n        _style: { width: '6%' },\n        renderContent: (item: any) => (item.popup ? 'true' : 'false'),\n      },\n      {\n        key: 'status',\n        label: 'Status',\n        _style: { width: '6%' },\n        renderContent: (item: any) => (\n          <div style={{ fontWeight: 'bold', color: colors[item.status] }}>{item.status}</div>\n        ),\n      },\n      { key: 'text', label: 'English Message', _style: { width: '20%' } },\n      { key: 'text_de', label: 'German Message', _style: { width: '20%' } },\n      {\n        key: 'duration',\n        label: 'Duration',\n        _style: { width: '6%' },\n        renderContent: (item: any) => (item.popup === false ? 0 : item.duration),\n      },\n      { key: 'descriptions', label: 'Description', _style: { width: '20%' } },\n      {\n        key: 'action',\n        label: 'Action',\n        _style: { width: '6%' },\n        renderContent: (item: any) => (\n          <div className=\"py-2\">\n            <CButton\n              color=\"primary\"\n              variant=\"outline\"\n              shape=\"square\"\n              size=\"sm\"\n              onClick={() => setUpdateModalData({ show: true, initialValues: item })}\n            >\n              <i className=\"fas fa-pencil-alt\"> </i>\n            </CButton>\n          </div>\n        ),\n      },\n    ],\n    [],\n  );\n\n  const reload = useCallback(() => {\n    setIsLoading(true);\n    callApi(\n      {\n        method: 'get',\n        api: config.rest.getAllMessages(),\n      },\n      (response) => {\n        const { status, data: data1 } = response;\n        if (status === SUCCESS)\n          setData(\n            data1\n              .map((value: any) => {\n                return { ...value, message_id: parseInt(value.message_id) };\n              })\n              .sort((x: any, y: any) => y.message_id - x.message_id),\n          );\n        setIsLoading(false);\n      },\n    );\n  }, []);\n\n  useEffect(() => {\n    reload();\n  }, [reload]);\n\n  let noItems = <div />;\n\n  const popupBool = popup === 'true' ? true : false;\n\n  let filteredData = data;\n  if (search !== '') {\n    const searchLowerCase = search.toLowerCase();\n    filteredData = filteredData.filter(\n      (value: any) =>\n        value.message_id.toString().includes(searchLowerCase) ||\n        value.text?.toLowerCase().includes(searchLowerCase) ||\n        value.text_de?.toLowerCase().toString().includes(searchLowerCase),\n    );\n  }\n  if (popup !== '') filteredData = filteredData.filter((value: any) => value.popup === popupBool);\n  if (status !== '') filteredData = filteredData.filter((value: any) => value.status === status);\n\n  if (!isLoading && filteredData.length === 0) noItems = <div>No items found!</div>;\n\n  return (\n    <div className=\"px-5 mx-3\" style={{ marginTop: 10 }}>\n      <ModalCreateMessage\n        data={data}\n        show={createModalData.show}\n        initialValues={createModalData.initialValues}\n        handleClose={() => setCreateModalData({ show: false, initialValues: {} })}\n        reload={reload}\n      />\n      <ModalUpdateMessage\n        show={updateModalData.show}\n        initialValues={updateModalData.initialValues}\n        handleClose={() => setUpdateModalData({ show: false, initialValues: {} })}\n        reload={reload}\n      />\n\n      <div>\n        <div style={{ display: 'flex', flexDirection: 'row', marginTop: 20, marginBottom: 30 }}>\n          <div className=\"mr-3\" style={{ position: 'relative', width: 220 }}>\n            <CInput\n              style={{ width: 220, position: 'absolute', paddingLeft: 32 }}\n              type=\"text\"\n              placeholder=\"search\"\n              value={search}\n              maxLength={50}\n              onChange={(e: any) => setSearch(e.target.value)}\n            />\n            <i style={{ position: 'absolute', left: 10, top: 11, color: '#777' }} className=\"fa fa-search icon\"></i>\n          </div>\n          <CSelect\n            className=\"mr-3\"\n            style={{ width: 160 }}\n            value={popup}\n            onChange={(e: any) => setPopup(e.target.value)}\n          >\n            <option value=\"\">Show popup?</option>\n            <option>true</option>\n            <option>false</option>\n          </CSelect>\n          <CSelect style={{ width: 160 }} value={status} onChange={(e: any) => setStatus(e.target.value)}>\n            <option value=\"\">Status?</option>\n            {statuses.map((value: string) => (\n              <option key={value}>{value}</option>\n            ))}\n          </CSelect>\n          <div style={{ textAlign: 'right', flex: 1 }}>\n            <CButton\n              color=\"primary\"\n              onClick={() => {\n                setCreateModalData({\n                  show: true,\n                  initialValues: {\n                    message_id: '',\n                    popup: 'true',\n                    status: 'success',\n                    text: '',\n                    text_de: '',\n                    duration: 5,\n                    descriptions: '',\n                  },\n                });\n              }}\n            >\n              Create message\n            </CButton>\n          </div>\n        </div>\n      </div>\n      <div className=\"hb-table\">\n        <CDataTable\n          items={filteredData}\n          fields={fields}\n          loading={isLoading}\n          noItemsViewSlot={noItems}\n          hover\n          striped\n          sorter\n          sorterValue={{ column: 'message_id', desc: 'true' }}\n          scopedSlots={renderFields(fields)}\n        />\n      </div>\n      {filteredData.length !== 0 && (\n        <div style={{ textAlign: 'right', marginRight: 100 }}>Total: {filteredData.length}</div>\n      )}\n    </div>\n  );\n};\n\nexport default SettingMessages;\n","import React from 'react';\n\ninterface Props {\n  className?: string;\n  centered?: boolean;\n  label: string;\n  width?: number;\n  style?: any;\n}\n\nconst FieldName: React.FC<Props> = (props) => {\n  let { className, label, children, width, centered, style } = props;\n  width = width || 110;\n\n  return (\n    <div className={`d-flex mb-3 ${centered ? 'align-items-center' : ''} ${className || ''}`} style={style}>\n      <div style={{ minWidth: width, marginTop: 6 }}>{label}</div>\n      <div style={{ width: `calc(100% - ${width}px)` }}>{children}</div>\n    </div>\n  );\n};\n\nexport default FieldName;\n"],"sourceRoot":""}