{"version":3,"sources":["views/user/containers/HeaderLogo.tsx","views/pages/verifyEmail/VerifyEmail.tsx"],"names":["HeaderLogo","props","className","style","height","logoMain","VerifyEmail","callApi","useApi","query","URLSearchParams","location","search","email","get","code","type","useState","showModal","title","text","button","handleClickButton","closeBtn","message","setMessage","history","useHistory","resendEmail","method","api","config","rest","resendVerifyEmail","loading","msg","messages","resendVerifyEmailFailure","status","ERROR","push","handleClose","useEffect","body","activate_code","verifyEmail","JSON","stringify","response","id","SUCCESS","show","content","up","upCallback","backdropOpacity","hideCloseBtn","minHeight"],"mappings":"8JAgBeA,UAZc,SAACC,GAC5B,OACE,qBAAKC,UAAU,uBAAf,SACE,qBAAKA,UAAU,sBAAf,SACE,qBAAKA,UAAU,mDAAmDC,MAAO,CAAEC,OAAQ,QAAnF,SACGC,Y,qHCkIIC,UAnIoC,SAACL,GAAW,IAAD,EACpDM,EAAYC,cAAZD,QAEFE,EAAQ,IAAIC,gBAAJ,UAAoBT,EAAMU,gBAA1B,aAAoB,EAAgBC,QAC5CC,EAAQJ,EAAMK,IAAI,SAClBC,EAAON,EAAMK,IAAI,QACjBE,EAAOP,EAAMK,IAAI,QANqC,EAQ9BG,mBAQ3B,CACDC,WAAW,EACXC,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRC,kBAAmB,aACnBC,UAAU,IAtBgD,mBAQrDC,EARqD,KAQ5CC,EAR4C,KAyBtDC,EAAUC,cAKVC,EAAc,WAClBrB,EACE,CACEsB,OAAQ,MACRC,IAAKC,IAAOC,KAAKC,kBAAkBpB,GAAS,IAC5CqB,SAAS,EACTC,IAAKJ,IAAOK,SAASC,2BAEvB,YAAgB,EAAbC,SACcC,KACbd,EAAW,CACTP,WAAW,EACXC,MAAO,wBACPC,KACE,uHACFC,OAAQ,aACRC,kBAAmB,kBAAMI,EAAQc,KAAK,aACtCjB,UAAU,EACVkB,YAAa,kBAAMf,EAAQc,KAAK,mBAO1CE,qBAAU,WACR,GAAK7B,GAAUE,GAASC,EACnB,CACH,IAAM2B,EAAO,CACX9B,MAAOA,EACP+B,cAAe7B,GAIjBR,EACE,CACEsB,OAAQ,OACRC,IAAKC,IAAOC,KAAKa,cACjBF,KAAMG,KAAKC,UAAUJ,GACrBT,SAAS,IAEX,SAACc,GAAc,IACLC,EAAeD,EAAfC,GAAeD,EAAXV,SACGY,IAEXzB,EADS,OAAPwB,GAAsB,OAAPA,EACN,CACT/B,WAAW,EACXC,MAAO,wBACPC,KAAM,oEACNC,OAAQ,aACRC,kBAAmB,kBAAMI,EAAQc,KAAK,cAG7B,CACTtB,WAAW,EACXC,MAAO,wBACPC,KAAM,+BACNC,OAAQ,aACRC,kBAAmB,kBAAMI,EAAQc,KAAK,eAI1Cf,EAAW,CACTP,WAAW,EACXC,MAAO,wBACPC,KAAM,8BACNC,OAAQ,mCACRC,kBAAmBM,YAzCCF,EAAQc,KAAK,cA+C1C,IAKH,IAAMC,EAAc,WACX,OAAPjB,QAAO,IAAPA,KAASF,qBAGX,OACE,sBAAKpB,UAAU,SAAf,UACE,cAAC,IAAD,CACEiD,KAAM3B,EAAQN,UACduB,YAAajB,EAAQiB,aAAeA,EACpCtB,MAAOK,EAAQL,MACfiC,QAAS5B,EAAQJ,KACjBiC,GAAI7B,EAAQH,OACZiC,WAAYb,EACZc,gBAAiB,GACjBC,cAAehC,EAAQD,WAEzB,qBAAKrB,UAAU,gBAAgBC,MAAO,CAAEsD,UAAW,SAAnD,SACE,cAAC,UAAD","file":"static/js/65.6c7d4c09.chunk.js","sourcesContent":["import React from 'react';\nimport { logoMain } from '../../../extensions';\nimport './Layout.scss';\n\nconst HeaderLogo: React.FC = (props) => {\n  return (\n    <div className=\"UserHeader-container\">\n      <div className=\"hb-header no-border\">\n        <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '100%' }}>\n          {logoMain}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HeaderLogo;\n","import React, { useEffect, useState } from 'react';\nimport { RouteComponentProps, useHistory } from 'react-router-dom';\nimport config from '../../../config';\nimport { ERROR, SUCCESS } from '../../../store/callApi/actions';\nimport { HBModalConfirm } from 'hbBaseClass';\nimport HeaderLogo from 'views/user/containers/HeaderLogo';\nimport { useApi } from 'store/callApi';\n\nconst VerifyEmail: React.FC<RouteComponentProps> = (props) => {\n  const { callApi } = useApi();\n\n  const query = new URLSearchParams(props.location?.search);\n  const email = query.get('email');\n  const code = query.get('code');\n  const type = query.get('type');\n\n  const [message, setMessage] = useState<{\n    showModal: boolean;\n    title: string;\n    text: string;\n    button: string;\n    handleClose?: () => void;\n    handleClickButton: () => void;\n    closeBtn?: boolean;\n  }>({\n    showModal: false,\n    title: '',\n    text: '',\n    button: '',\n    handleClickButton: () => {},\n    closeBtn: false,\n  });\n\n  const history = useHistory();\n\n  /**\n   * If the code is expired, call api to resend email and show popup send successfully\n   */\n  const resendEmail = () => {\n    callApi(\n      {\n        method: 'get',\n        api: config.rest.resendVerifyEmail(email || ''),\n        loading: true,\n        msg: config.messages.resendVerifyEmailFailure,\n      },\n      ({ status }) => {\n        if (status !== ERROR) {\n          setMessage({\n            showModal: true,\n            title: 'E-Mail Bestätigung',\n            text:\n              'Wir haben Ihnen gerade eine Bestätigung per E-Mail geschickt. Bitte überprüfen Sie jetzt Ihren Posteingang.',\n            button: 'Verstanden',\n            handleClickButton: () => history.push('/sign-in'),\n            closeBtn: true,\n            handleClose: () => history.push('/sign-in'),\n          });\n        }\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (!email || !code || !type) history.push('/sign-in');\n    else {\n      const body = {\n        email: email,\n        activate_code: code,\n      };\n\n      // Get status email verify, 3 cases\n      callApi(\n        {\n          method: 'post',\n          api: config.rest.verifyEmail(),\n          body: JSON.stringify(body),\n          loading: true,\n        },\n        (response) => {\n          const { id, status } = response;\n          if (status === SUCCESS) {\n            if (id === '10' || id === '29') {\n              setMessage({\n                showModal: true,\n                title: 'E-Mail Bestätigung',\n                text: 'Ihr Konto wurde aktiviert. Sie können sich am System anmelden.',\n                button: 'Verstanden',\n                handleClickButton: () => history.push('/sign-in'),\n              });\n            } else {\n              setMessage({\n                showModal: true,\n                title: 'E-Mail Bestätigung',\n                text: 'Ihr Konto wurde verifiziert.',\n                button: 'Verstanden',\n                handleClickButton: () => history.push('/sign-in'),\n              });\n            }\n          } else {\n            setMessage({\n              showModal: true,\n              title: 'E-Mail Bestätigung',\n              text: 'Dieser Link ist abgelaufen.',\n              button: 'Aktivierungslink erneut zusenden',\n              handleClickButton: resendEmail,\n            });\n          }\n        },\n      );\n    }\n  }, []);\n\n  /**\n   * Callback when click button confirm or X\n   */\n  const handleClose = () => {\n    message?.handleClickButton();\n  };\n\n  return (\n    <div className=\"petrol\">\n      <HBModalConfirm\n        show={message.showModal}\n        handleClose={message.handleClose || handleClose}\n        title={message.title}\n        content={message.text}\n        up={message.button}\n        upCallback={handleClose}\n        backdropOpacity={0.3}\n        hideCloseBtn={!message.closeBtn}\n      />\n      <div className=\"hb-background\" style={{ minHeight: '100vh' }}>\n        <HeaderLogo />\n      </div>\n    </div>\n  );\n};\n\nexport default VerifyEmail;\n"],"sourceRoot":""}