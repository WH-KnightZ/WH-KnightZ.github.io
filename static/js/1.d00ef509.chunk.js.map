{"version":3,"sources":["utilities/datetime.ts","utilities/format.ts","utilities/validate.ts","utilities/request.ts","components/screens/user/consulting/allAppointments/CategoryItem.tsx","components/menu/MenuOptions.tsx","components/screens/user/consulting/allAppointments/AppointmentTagInfo.tsx","components/screens/user/consulting/allAppointments/AppointmentItem.tsx","components/screens/user/consulting/bookAppointment/AppointmentBtnConfirm.tsx","components/screens/user/consulting/bookAppointment/QuestionItem.tsx","components/screens/user/consulting/ConsultingCategoryItem.tsx","components/screens/user/consulting/SetSchedule.tsx","store/auth/hooks.ts"],"names":["getScheduleTimeOptions","currentTime","options","maxTime","MAX_SCHEDULE_TIME","validTimes","listHours","filter","timeItem","map","value","label","getScheduleTimeStart","defaultTime","timeStart","moment","add","format","find","getScheduleMinTimeEnd","additionalHours","mmTimeStart","MAX_SCHEDULE_TIME_START","getDefaultTimeEnd","pluralize","word","suffixPlural","pluralizeExcercise","validateBookAppointmentAnswers","questions","answers","every","questionItem","questionId","id","required","question_type","qAnswers","answerValues","reduce","acc","answerItem","answer_title","answer","parentQuestionId","QUESTION_TYPES","YES_NO","RADIO","includes","TEXTBOX","length","MAX_QA_INPUT_LENGTH","MAX_SUB_QA_INPUT_LENGTH","currentAnswerData","qAnswer","sub_questions","isValidBookAppointmentSchedule","scheduleData","selectedOption","specificDate","currentDate","hours","duration","diff","asHours","specificDateVal","SCHEDULE_OPTIONS","TOMORROW","LATER","VALID_TIME_START_SUBMIT","convertAppointmentScheduleTime","timeEnd","mmAppointmentDate","TODAY","appointmentDate","appointment_time_begin","utc","unix","appointment_time_end","getBookAppointmentRequestParams","appointmentData","appointmentType","APPOINTMENT_TYPE_VALUES","APPOINTMENT_TYPES","NURSE","selectedTopic","adviceRelatives","userInfo","surveyAnswers","phone_number","street","gender","postal_code","no","place","Object","values","question_id","question_title","answerData","formatAnswerItem","formatQuestionId","formatSubQuestions","scheduleTime","result_survey","appointment_type","selected_treatments_id","customer_gender","postcode","relatives","cost","CategoryItem","props","className","title","unit","onClick","isNil","MenuOptions","open","anchorEl","onClose","children","menuRef","useRef","useEffect","document","addEventListener","handleCloseMenu","removeEventListener","e","isClickAnchor","current","contains","target","ref","optionItem","index","handleClickOption","icon","AppointmentTagInfo","REQUESTED","APPOINTMENT_REQUEST_TYPES","ACCEPTED","FINISHED","CANCELLED","LABEL_USER","LABEL_USER_DETAIL","AppointmentItem","authId","useAuth","user_id","requestType","appointment","onOpenPopupEdit","onOpenPopupCancel","onSetSelectedAppointment","isDetail","useState","isOpenMenu","setIsOpenMenu","btnMenuRef","requestTimeStart","requestTimeEnd","treatments","modified_date","cancel_by_id","cancelledNurse","cancelled","acceptedTimeStart","appointment_time_confirms_to_start","acceptedTimeEnd","appointment_time_confirms_to_stop","realityTimeStart","appointment_time_begin_reality","realityTimeEnd","appointment_time_end_reality","acceptedNurse","user_consulting","rate","feedback","diseases_title","useMemo","isAccepted","timeStartSeconds","timeEndSeconds","mmModifiedTime","timeStartDate","modifiedDate","isScheduleToday","scheduleDate","scheduleDateYMD","modifiedTime","finishedTime","secondsToDuration","lbCancelledBy","nurseId","first_name","last_name","avatar","isShowNurseInfo","nurseName","nurseAvatar","avaDefault","isRequestAccepted","isToday","isEditAccepted","isShowGoogleCalendar","isShowBtnMenu","labelUser","handleClickMenuItem","isEdit","stopPropagation","KMSImg","src","alt","isJoin","renderFooterContent","AppointmentBtnConfirm","rest","color","outline","QuestionItem","questionData","isSubQuestion","setAnswers","step_number","answerOptions","name","QUESTION_YES_NO_ICONS","subQuestions","handleChooseAnswer","newAnswers","keys","answerQuestionId","onChange","maxLength","placeholder","renderQuestion","subQuestion","ConsultingCategoryItem","description","image","defaultSpecificDate","Date","maxSpecificDate","convertDateOptions","SetSchedule","isEditSchedule","lbDate","lbTime","onConfirm","oldSelectedOption","oldTimeStart","oldTimeEnd","oldSpecificDate","defaultDateOptions","MAX_TIME_SET_SCHEDULE_TODAY","dateOptions","setDateOptions","setSelectedOption","DEFAULT_SCHEDULE_TIME_START","setTimeStart","setTimeEnd","setSpecificDate","isOpenPopup","setIsOpenPopup","timeStartOptions","timeEndOptions","specificDateValue","isValidOption","some","dateOption","newSelectedOption","isValidTimeStart","option","newTimeStart","handleChangeTime","isSetTimeStart","handleConfirm","isValidSchedule","isValidTimeEnd","disabled","selected","minDate","maxDate","type","show","handleClose","content","up","upCallback","dispatch","useDispatch","authReducer","useSelector","state","auth","shallowEqual","updateProfile","payload"],"mappings":"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","file":"static/js/1.d00ef509.chunk.js","sourcesContent":["import moment from 'moment';\n\nimport { listHours } from 'config';\nimport { MAX_SCHEDULE_TIME, MAX_SCHEDULE_TIME_START } from 'configs/constants';\n\n/**\n * Get schedule time options in book an appointment\n *\n * @param currentTime Current time has format HH:mm\n * @param options Options\n *\n * @return array\n */\nexport const getScheduleTimeOptions = (currentTime: string, options: any = {}) => {\n  const { maxTime = MAX_SCHEDULE_TIME } = options;\n\n  const validTimes = listHours.filter((timeItem) => timeItem >= currentTime && timeItem <= maxTime);\n\n  return validTimes.map((value) => ({ label: value, value }));\n};\n\n/**\n * Get schedule time start in book an appointment\n *\n * @param defaultTime Default time, if defaultTime has value => do not get by current time\n *\n * @return array\n */\nexport const getScheduleTimeStart = (defaultTime?: string) => {\n  if (defaultTime) return defaultTime;\n\n  const timeStart = moment().add(2, 'hours').format('HH:mm');\n\n  return listHours.find((timeItem) => timeItem >= timeStart && timeItem <= '23:45') || timeStart;\n};\n\n/**\n * Get min schedule time end in book an appointment\n *\n * @param timeStart Time start value\n * @param additionalHours Additional hours\n *\n * @return string\n */\nexport const getScheduleMinTimeEnd = (timeStart: string = '', additionalHours: number = 1) => {\n  const mmTimeStart = moment(`${moment().format('YYYY-MM-DD')} ${timeStart}`);\n\n  return timeStart < MAX_SCHEDULE_TIME_START\n    ? mmTimeStart.add(additionalHours, 'hours').format('HH:mm')\n    : MAX_SCHEDULE_TIME;\n};\n\n/**\n * Get default time end by time start\n *\n * @param timeStart Time start value\n *\n * @return string\n */\nexport const getDefaultTimeEnd = (timeStart = '') => {\n  return timeStart < '23:00' ? getScheduleMinTimeEnd(timeStart) : MAX_SCHEDULE_TIME;\n};\n","/**\n * Get plural of word\n *\n * @param value How many of the word exist\n * @param word Word wanna make plural\n * @param suffixPlural Suffix word\n *\n * @return string\n */\nexport const pluralize = (value = 0, word = '', suffixPlural = 'en') => {\n  return value > 1 ? `${word}${suffixPlural}` : word;\n};\n\n/**\n * Get plural of exercise\n *\n * @param value How many of the exercise exist\n *\n * @return string\n */\nexport const pluralizeExcercise = (value = 0) => {\n  return `${value} ${value === 1 ? 'Übung' : 'Übungen'}`;\n};\n","import { includes } from 'lodash';\nimport {\n  QUESTION_TYPES,\n  MAX_QA_INPUT_LENGTH,\n  MAX_SUB_QA_INPUT_LENGTH,\n  VALID_TIME_START_SUBMIT,\n  SCHEDULE_OPTIONS,\n} from 'configs/constants';\nimport moment from 'moment';\n\n/**\n * Validate book an appointment survey's answers\n *\n * @param questions Questions get from database\n * @param answers User input answer\n *\n * @return Boolean\n */\nexport const validateBookAppointmentAnswers = (questions: any = [], answers: any = {}) => {\n  return questions.every((questionItem: any) => {\n    const { id: questionId, required, question_type, answers: qAnswers = [] } = questionItem;\n    const answerValues = qAnswers.reduce((acc: any, answerItem: any) => [...acc, answerItem.answer_title], []);\n\n    // get current question's answer\n    const { answer = '', parentQuestionId } = answers[questionId] || {};\n\n    // validate required\n    if (required && !answer) return false;\n\n    // validate value\n    switch (question_type) {\n      case QUESTION_TYPES.YES_NO:\n      case QUESTION_TYPES.RADIO: {\n        if (!includes(answerValues, answer)) {\n          return false;\n        }\n        break;\n      }\n      case QUESTION_TYPES.TEXTBOX: {\n        if (answer.length > MAX_QA_INPUT_LENGTH) return false;\n        if (parentQuestionId && answer.length > MAX_SUB_QA_INPUT_LENGTH) return false;\n      }\n    }\n\n    // validate sub questions\n    const currentAnswerData = qAnswers.find((qAnswer: any) => qAnswer.answer_title === answer);\n    if (currentAnswerData) {\n      const { sub_questions = [] } = currentAnswerData;\n\n      const isValidSubQA = validateBookAppointmentAnswers(sub_questions, answers);\n      if (!isValidSubQA) return false;\n    }\n\n    return true;\n  });\n};\n\n/**\n * Check valid book an appoint schedule\n *\n * @param scheduleData Schedule data\n *\n * @return boolean\n */\nexport const isValidBookAppointmentSchedule = (scheduleData: any) => {\n  const { selectedOption, timeStart, specificDate } = scheduleData || {};\n  const currentDate = moment().format('YYYY-MM-DD');\n  const duration = moment.duration(moment(`${currentDate} ${timeStart}`).diff(moment()));\n  const hours = duration.asHours();\n  const specificDateVal = moment(specificDate).format('YYYY-MM-DD');\n\n  // check valid specificDate\n  const isValidDate =\n    selectedOption === SCHEDULE_OPTIONS.TOMORROW ||\n    (selectedOption === SCHEDULE_OPTIONS.LATER && currentDate <= specificDateVal);\n\n  return isValidDate || hours >= VALID_TIME_START_SUBMIT;\n};\n","import moment from 'moment';\nimport { SCHEDULE_OPTIONS, APPOINTMENT_TYPES, APPOINTMENT_TYPE_VALUES } from 'configs/constants';\nimport { ScheduleData } from 'types/appointments';\n\n/**\n * Convert appointment schedule time\n *\n * @param scheduleData Schedule data\n *\n * @return object\n */\nexport const convertAppointmentScheduleTime = (scheduleData: ScheduleData) => {\n  const { selectedOption, specificDate, timeStart, timeEnd } = scheduleData;\n\n  // convert schedule time\n  let mmAppointmentDate = moment();\n  if (selectedOption !== SCHEDULE_OPTIONS.TODAY) {\n    mmAppointmentDate = selectedOption === SCHEDULE_OPTIONS.LATER ? moment(specificDate) : moment().add(1, 'd');\n  }\n  const appointmentDate = mmAppointmentDate.format('YYYY-MM-DD');\n\n  return {\n    appointment_time_begin: moment(`${appointmentDate} ${timeStart}`).utc().unix(),\n    appointment_time_end: moment(`${appointmentDate} ${timeEnd}`).utc().unix(),\n  };\n};\n\n/**\n * Get book an appointment request params\n *\n * @param appointmentData Book an appointment data\n * @param appointmentType For nurse or assistant\n *\n * @return Object\n */\nexport const getBookAppointmentRequestParams = (\n  appointmentData: any = {},\n  appointmentType = APPOINTMENT_TYPE_VALUES[APPOINTMENT_TYPES.NURSE],\n) => {\n  const {\n    selectedTopic,\n    adviceRelatives = [],\n    scheduleData = {},\n    userInfo = {},\n    surveyAnswers = {},\n  } = appointmentData || {};\n  const { phone_number = '', street, gender, postal_code, no, place } = userInfo;\n\n  // convert question's answer data\n  const questions = [...Object.values(surveyAnswers)].reduce((acc: any[], answerItem: any) => {\n    const { question_id, answer, question_title, parentQuestionId } = answerItem || {};\n    const answerData = { question_id, answer, question_title };\n\n    // if question is not sub question\n    if (!parentQuestionId) {\n      return [...acc, { ...answerData, sub_questions: [] }];\n    }\n\n    // add sub question into parent question\n    acc = acc.map((formatAnswerItem) => {\n      const { question_id: formatQuestionId, sub_questions: formatSubQuestions } = formatAnswerItem || {};\n      // if finded parent question\n      if (formatQuestionId === parentQuestionId) {\n        return {\n          ...formatAnswerItem,\n          sub_questions: [...formatSubQuestions, answerData],\n        };\n      }\n\n      return formatAnswerItem;\n    });\n    return acc;\n  }, []);\n\n  // convert schedule time\n  const scheduleTime = convertAppointmentScheduleTime(scheduleData);\n\n  return {\n    result_survey: { questions },\n    appointment_type: appointmentType,\n    selected_treatments_id: selectedTopic,\n    customer_gender: gender,\n    phone_number,\n    street,\n    postcode: postal_code,\n    no,\n    place,\n    relatives: adviceRelatives,\n    cost: 1,\n    ...scheduleTime,\n  };\n};\n","import React from 'react';\nimport { isNil } from 'lodash';\n\nimport './CategoryItem.scss';\n\ninterface PropTypes {\n  className?: string;\n  title?: string;\n  value?: number;\n  unit?: string;\n  onClick?: () => void;\n}\n\nconst CategoryItem = (props: PropTypes) => {\n  const { className = '', title = '', value, unit = 'Beratungen', onClick = () => {} } = props;\n\n  return (\n    <div className={`CategoryItem-container ${className}`} onClick={onClick}>\n      <h5 className=\"CategoryItem-title\">{title}</h5>\n      <div className=\"CategoryItem-footer\">\n        <span className=\"text\">{`${!isNil(value) ? value : ''} ${unit}`}</span>\n        <span className=\"hb-icon-arrow-right icon\" />\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryItem;\n","import React, { useEffect, useRef } from 'react';\n\nimport './Menu.scss';\n\ntype Option = {\n  icon?: string;\n  label: string;\n  onClick?: () => void;\n};\n\ninterface PropTypes {\n  className?: string;\n  anchorEl?: any;\n  open?: boolean;\n  options?: Option[];\n  onClose?: () => void;\n  children?: React.ReactNode;\n}\n\nconst MenuOptions = (props: PropTypes) => {\n  const { className = '', open, options = [], anchorEl, onClose = () => {}, children } = props;\n\n  // ref\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (open) document.addEventListener('click', handleCloseMenu);\n\n    return () => {\n      document.removeEventListener('click', handleCloseMenu);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]);\n\n  /**\n   * Handle close menu\n   */\n  const handleCloseMenu = (e: any) => {\n    const isClickAnchor = !anchorEl || !anchorEl?.current?.contains(e.target);\n\n    if (!menuRef?.current?.contains(e.target) && isClickAnchor) {\n      onClose();\n    }\n  };\n\n  /**\n   * Handle click option item\n   *\n   * @param optionItem Menu option item\n   */\n  const handleClickOption = (optionItem: Option) => {\n    const { onClick } = optionItem;\n\n    onClick && onClick();\n    onClose();\n  };\n\n  return (\n    <div className={`MenuOptions-area ${className} ${open && 'open'}`} ref={menuRef}>\n      <ul className=\"MenuOptions-list\">\n        {children || (\n          <>\n            {options.map((optionItem, index) => (\n              <li key={index} onClick={() => handleClickOption(optionItem)}>\n                {optionItem.icon && <i className={optionItem.icon} />} {optionItem.label}\n              </li>\n            ))}\n          </>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default MenuOptions;\n","import React from 'react';\n\ninterface PropTypes {\n  icon?: string;\n  value?: string;\n}\n\nconst AppointmentTagInfo = (props: PropTypes) => {\n  const { icon = '', value = '' } = props;\n\n  return (\n    <div className=\"AppointmentTagInfo-container\">\n      {icon && <i className={`HbIc-${icon}`} />}\n      {value}\n    </div>\n  );\n};\n\nexport default AppointmentTagInfo;\n","import React, { useMemo, useState, useRef } from 'react';\nimport moment from 'moment';\n\nimport { HBButtonSmall } from 'hbBaseClass';\nimport { MenuOptions } from 'components/menu';\nimport AppointmentTagInfo from './AppointmentTagInfo';\n\nimport { useAuth } from 'store/auth';\nimport { APPOINTMENT_REQUEST_TYPES, MAX_SCHEDULE_TIME, SCHEDULE_OPTIONS } from 'configs/constants';\nimport { secondsToDuration } from 'utils';\nimport { pluralize } from 'utilities';\nimport avaDefault from 'assets/images/default-avatar.png';\n\nimport './AppointmentItem.scss';\nimport KMSImg from 'components/kmsComponents/KMSImg';\n\nconst { REQUESTED, ACCEPTED, FINISHED, CANCELLED } = APPOINTMENT_REQUEST_TYPES;\n\nconst LABEL_USER = {\n  [ACCEPTED]: 'Anfrage gesendet an:',\n  [FINISHED]: 'Pflegeberaterin:',\n  [CANCELLED]: 'Pflegeberaterin:',\n};\n\nconst LABEL_USER_DETAIL = {\n  [REQUESTED]: 'Pflegenotfall Soforthilfe',\n  [ACCEPTED]: 'Pflegenotfall Soforthilfe',\n  [FINISHED]: 'Pflegenotfall Soforthilfe',\n  [CANCELLED]: 'Pflegenotfall Soforthilfe',\n};\n\ninterface PropTypes {\n  className?: string;\n  requestType?: string;\n  appointment: any;\n  onOpenPopupEdit?: Function;\n  onOpenPopupCancel?: Function;\n  onSetSelectedAppointment?: Function;\n  onClick?: () => void;\n  isDetail?: boolean;\n}\n\nconst AppointmentItem = (props: PropTypes) => {\n  const { user_id: authId } = useAuth();\n  const {\n    className = '',\n    requestType = REQUESTED,\n    appointment,\n    onOpenPopupEdit,\n    onOpenPopupCancel,\n    onSetSelectedAppointment,\n    isDetail,\n    onClick = () => {},\n  } = props;\n  const [isOpenMenu, setIsOpenMenu] = useState(false);\n\n  // ref\n  const btnMenuRef = useRef<HTMLSpanElement>(null);\n\n  const {\n    appointment_time_begin: requestTimeStart,\n    appointment_time_end: requestTimeEnd,\n    treatments,\n    modified_date,\n    cancel_by_id,\n    cancelled: cancelledNurse,\n    appointment_time_confirms_to_start: acceptedTimeStart,\n    appointment_time_confirms_to_stop: acceptedTimeEnd,\n    appointment_time_begin_reality: realityTimeStart,\n    appointment_time_end_reality: realityTimeEnd,\n    user_consulting: acceptedNurse,\n    feedback: rate,\n  } = appointment;\n  const { diseases_title = '' } = treatments || {};\n\n  // get timeStart, timeEnd by request type\n  const { timeStartSeconds, timeEndSeconds } = useMemo(() => {\n    const isAccepted = acceptedTimeStart;\n\n    switch (requestType) {\n      case REQUESTED:\n        return {\n          timeStartSeconds: requestTimeStart,\n          timeEndSeconds: requestTimeEnd,\n        };\n      case ACCEPTED:\n      case FINISHED:\n        return {\n          timeStartSeconds: acceptedTimeStart,\n          timeEndSeconds: acceptedTimeEnd,\n        };\n      case CANCELLED:\n      default:\n        return {\n          timeStartSeconds: isAccepted ? acceptedTimeStart : requestTimeStart,\n          timeEndSeconds: isAccepted ? acceptedTimeEnd : requestTimeEnd,\n        };\n    }\n  }, [requestType, requestTimeStart, requestTimeEnd, acceptedTimeStart, acceptedTimeEnd]);\n\n  // convert datetime\n  const { scheduleTime, scheduleDate, modifiedDate, modifiedTime, finishedTime, scheduleDateYMD } = useMemo(() => {\n    const currentDate = moment().format('DD.MM.YY');\n    const mmTimeStart = moment(timeStartSeconds * 1000);\n    const mmModifiedTime = moment(modified_date * 1000);\n\n    const timeStart = mmTimeStart.format('HH:mm');\n    const timeEnd = moment(timeEndSeconds * 1000).format('HH:mm');\n    const timeStartDate = mmTimeStart.format('DD.MM.YY');\n    const modifiedDate = mmModifiedTime.format('DD.MM.YY');\n    const isScheduleToday = currentDate === timeStartDate;\n\n    return {\n      scheduleTime: `${timeStart} - ${timeEnd === '00:00' ? MAX_SCHEDULE_TIME : timeEnd}`,\n      scheduleDate: isScheduleToday ? SCHEDULE_OPTIONS.TODAY : timeStartDate,\n      scheduleDateYMD: isScheduleToday ? SCHEDULE_OPTIONS.TODAY : mmTimeStart.format('YYYY-MM-DD'),\n      modifiedDate: currentDate === modifiedDate ? SCHEDULE_OPTIONS.TODAY : modifiedDate,\n      modifiedTime: mmModifiedTime.format('HH:mm'),\n      finishedTime: secondsToDuration(realityTimeEnd - realityTimeStart),\n    };\n  }, [timeStartSeconds, timeEndSeconds, modified_date, realityTimeStart, realityTimeEnd]);\n\n  // get label cancelled by\n  const lbCancelledBy = useMemo(() => {\n    if (authId === cancel_by_id) {\n      return 'Ihre Stornierung';\n    }\n\n    return cancelledNurse?.id\n      ? 'Stornierung durch den/die PflegeberaterIn'\n      : 'Automatische Stornierung durch das System';\n  }, [cancel_by_id, cancelledNurse, authId]);\n\n  // get nurse's info\n  const { isShowNurseInfo, nurseName, nurseAvatar } = useMemo(() => {\n    const nurseInfo = requestType === CANCELLED ? cancelledNurse : acceptedNurse;\n    const { id: nurseId, first_name = '', last_name = '', avatar } = nurseInfo || {};\n    let isShowNurseInfo = true;\n\n    // With request type is cancelled & no any nurse had cancelled => not show user's info\n    if (requestType === CANCELLED && (!nurseId || nurseId === authId)) {\n      isShowNurseInfo = false;\n    }\n\n    return {\n      isShowNurseInfo,\n      nurseName: `${first_name} ${last_name}`,\n      nurseAvatar: avatar || avaDefault,\n    };\n  }, [acceptedNurse, cancelledNurse, authId, requestType]);\n\n  // check can edit appointment accepted\n  const { isEditAccepted, isShowGoogleCalendar } = useMemo(() => {\n    const isRequestAccepted = requestType === ACCEPTED;\n    const currentDate = moment().format('YYYY-MM-DD');\n    const duration = moment.duration(moment(acceptedTimeStart * 1000).diff(moment()));\n    const hours = duration.asHours();\n    const isToday = scheduleDate === SCHEDULE_OPTIONS.TODAY;\n\n    return {\n      isEditAccepted: isRequestAccepted && ((isToday && hours > 1) || scheduleDateYMD > currentDate),\n      isShowGoogleCalendar: isRequestAccepted && isToday && hours <= 1,\n    };\n  }, [scheduleDate, scheduleDateYMD, acceptedTimeStart, requestType]);\n\n  // check show button menu\n  const isShowBtnMenu = useMemo(() => {\n    return requestType === REQUESTED || isEditAccepted || isShowGoogleCalendar;\n  }, [requestType, isEditAccepted, isShowGoogleCalendar]);\n\n  // Get label user\n  const labelUser = useMemo(() => {\n    return isDetail ? LABEL_USER_DETAIL[requestType] : LABEL_USER[requestType];\n  }, [isDetail, requestType]);\n\n  /**\n   * Handle click menu item\n   *\n   * @param e React MouseEvent\n   * @param isEdit Action edit or cancel\n   */\n  const handleClickMenuItem = (isEdit?: boolean) => (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpenMenu(false);\n    onSetSelectedAppointment && onSetSelectedAppointment(appointment);\n\n    if (isEdit) {\n      requestType === REQUESTED && onOpenPopupEdit && onOpenPopupEdit();\n      return;\n    }\n\n    onOpenPopupCancel && onOpenPopupCancel();\n  };\n\n  /**\n   * Handle click menu options\n   *\n   * @param e React MouseEvent\n   */\n  const handleClickMenuOptions = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpenMenu(true);\n  };\n\n  /**\n   * Handle render footer content\n   */\n  const renderFooterContent = () => {\n    switch (requestType) {\n      case REQUESTED:\n        return (\n          <div className=\"AppointmentItem-status hasBorder\">\n            <span className=\"AppointmentItem-status requested \">\n              <i className=\"hb-icon-loader\" />\n              <span>Antwort ausständig</span>\n            </span>\n          </div>\n        );\n      case CANCELLED:\n        return (\n          <div className=\"AppointmentItem-status cancelled hasBorder\">\n            <div className=\"reason\">\n              <span className=\"HbIc-x-rounded icon\" />\n              <span>\n                {lbCancelledBy}: {modifiedDate} um {modifiedTime}\n              </span>\n            </div>\n          </div>\n        );\n      case FINISHED:\n        return (\n          <div className=\"AppointmentItem-status finished hasBorder\">\n            {!rate ? (\n              <HBButtonSmall>Beratung bewerten</HBButtonSmall>\n            ) : (\n              <div className=\"vote\">\n                <span className=\"rate\">\n                  <span className=\"HbIc-star icon\" />\n                  {`${rate} ${pluralize(rate, 'Stern', 'e')}`}\n                </span>\n                <HBButtonSmall>Zur Bewertung</HBButtonSmall>\n              </div>\n            )}\n          </div>\n        );\n      case ACCEPTED: {\n        const currentTime = moment().unix();\n        const isJoin = currentTime >= acceptedTimeStart && currentTime <= acceptedTimeEnd;\n\n        return (\n          <div className={`AppointmentItem-status accepted ${isJoin && 'hasBorder'}`}>\n            {isJoin && <HBButtonSmall>Teilnehmen</HBButtonSmall>}\n          </div>\n        );\n      }\n    }\n  };\n\n  return (\n    <div className={`AppointmentItem-container ${className} ${isDetail && 'detail'}`} onClick={onClick}>\n      <div className=\"AppointmentItem-up\">\n        <div className=\"AppointmentItem-schedule\">\n          <div className=\"AppointmentItem-dateTime\">\n            <AppointmentTagInfo icon=\"clock\" value={scheduleTime} />\n            <AppointmentTagInfo icon=\"calendar\" value={scheduleDate} />\n            {requestType === FINISHED && finishedTime && <AppointmentTagInfo icon=\"hourglass\" value={finishedTime} />}\n          </div>\n          {!isDetail && isShowBtnMenu && (\n            <>\n              <span\n                className=\"hb-icon-more-ver AppointmentItem-btnMenu\"\n                ref={btnMenuRef}\n                onClick={handleClickMenuOptions}\n              />\n              <MenuOptions open={isOpenMenu} anchorEl={btnMenuRef} onClose={() => setIsOpenMenu(false)}>\n                {(requestType === REQUESTED || (requestType === ACCEPTED && isEditAccepted)) && (\n                  <>\n                    <li onClick={handleClickMenuItem(true)}>\n                      <i className=\"hb-icon-edit-2\" /> Bearbeiten\n                    </li>\n                    <li onClick={handleClickMenuItem()}>\n                      <i className=\"hb-icon-trash\" /> Löschen\n                    </li>\n                  </>\n                )}\n                {requestType === ACCEPTED && (\n                  <li onClick={() => setIsOpenMenu(false)}>\n                    <i className=\"hb-icon-calendar\" /> Im Google-Kalender speichern\n                  </li>\n                )}\n              </MenuOptions>\n            </>\n          )}\n        </div>\n        <h4 className=\"AppointmentItem-topic\">{diseases_title}</h4>\n      </div>\n      <div className=\"AppointmentItem-down\">\n        {requestType !== REQUESTED && isShowNurseInfo && (\n          <div className=\"AppointmentItem-userInfo\">\n            <KMSImg className=\"AppointmentItem-ava\" src={nurseAvatar} alt=\"\" />\n            <div className=\"AppointmentItem-userName\">\n              <p>{labelUser}</p>\n              <p>{nurseName}</p>\n            </div>\n          </div>\n        )}\n        <div className=\"AppointmentItem-footer\">{renderFooterContent()}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default AppointmentItem;\n","import React from 'react'\n\nimport { HBButtonFull, HBButtonFullProps } from 'hbBaseClass'\n\ninterface PropTypes extends HBButtonFullProps {\n  title: string;\n  onClick?: Function;\n}\n\nconst AppointmentBtnConfirm: React.FC<PropTypes> = (props) => {\n  const { title, onClick = () => {}, ...rest } = props\n\n  return (\n    <div className=\"AppointmentLayout-footer\">\n      <HBButtonFull\n        {...rest}\n        color=\"petrol\"\n        outline\n        children={title}\n        onClick={onClick}\n      />\n    </div>\n  )\n}\n\nexport default AppointmentBtnConfirm\n","import React, { useMemo } from 'react';\n\nimport { ListInputRadios, ListInputRadiosVertical, InputTextArea } from 'components';\n\nimport { QUESTION_TYPES, QUESTION_YES_NO_ICONS, MAX_QA_INPUT_LENGTH, MAX_SUB_QA_INPUT_LENGTH } from 'configs/constants';\n\ninterface PropTypes {\n  questionData: any;\n  parentQuestionId?: number;\n  isSubQuestion?: boolean;\n  answers: any;\n  setAnswers: (answers: any) => void;\n}\n\nconst QuestionItem = (props: PropTypes) => {\n  const { questionData = {}, parentQuestionId, isSubQuestion, answers = {}, setAnswers = () => {} } = props;\n  const { id: questionId, question_title = '', question_type, step_number, answers: qAnswers = [] } = questionData;\n\n  // Get answer options\n  const answerOptions = useMemo(() => {\n    return qAnswers.map((answerItem: any) => {\n      const { answer_title: label } = answerItem;\n\n      return { label, name: questionId, value: label, icon: QUESTION_YES_NO_ICONS[label] };\n    });\n  }, [questionId, qAnswers]);\n\n  // Get answer\n  const answer = useMemo(() => {\n    const { answer = '' } = answers[questionId] || {};\n\n    return answer;\n  }, [questionId, answers]);\n\n  // Get sub questions\n  const subQuestions = useMemo(() => {\n    const answerData = qAnswers.find((answerItem: any) => answerItem?.answer_title === answer) || {};\n    const { sub_questions = [] } = answerData;\n\n    return sub_questions;\n  }, [qAnswers, answer]);\n\n  /**\n   * Handle choose answer for all question type\n   *\n   * @param e React.ChangeEvent (HTMLInputElement))\n   */\n  const handleChooseAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    // clear old additional question answer with same question id\n    const newAnswers = Object.keys(answers).reduce((acc, answerQuestionId) => {\n      const answerItem = answers[answerQuestionId] || {};\n      const { parentQuestionId } = answerItem;\n\n      return parentQuestionId !== questionId ? { ...acc, [answerQuestionId]: answerItem } : acc;\n    }, {});\n\n    // update new answer\n    setAnswers({\n      ...newAnswers,\n      [questionId]: {\n        question_id: questionId,\n        question_title,\n        answer: value,\n        step_number,\n        parentQuestionId,\n      },\n    });\n  };\n\n  /**\n   * Handle render child question content\n   */\n  const renderQuestion = () => {\n    switch (question_type) {\n      case QUESTION_TYPES.TEXTBOX:\n        return (\n          <InputTextArea\n            value={answer}\n            onChange={handleChooseAnswer}\n            maxLength={isSubQuestion ? MAX_SUB_QA_INPUT_LENGTH : MAX_QA_INPUT_LENGTH}\n            placeholder={isSubQuestion ? 'Ihr Pflegehilfsmittel' : 'Bitte angeben'}\n          />\n        );\n      case QUESTION_TYPES.RADIO:\n        return <ListInputRadios value={answer} options={answerOptions} onChange={handleChooseAnswer} />;\n      case QUESTION_TYPES.YES_NO:\n      default:\n        return <ListInputRadiosVertical value={answer} options={answerOptions} onChange={handleChooseAnswer} />;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"SurveyQuestionItem-container\">\n        <h3 className=\"AppointmentLayout-title\">{question_title}</h3>\n        <div className=\"SurveyQuestionItem-answers\">{renderQuestion()}</div>\n      </div>\n      {subQuestions.map((subQuestion: any, index: number) => (\n        <QuestionItem\n          key={index}\n          isSubQuestion\n          questionData={subQuestion}\n          parentQuestionId={questionId}\n          answers={answers}\n          setAnswers={setAnswers}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default QuestionItem;\n","import KMSImg from 'components/kmsComponents/KMSImg';\nimport React from 'react';\n\nimport './ConsultingCategoryItem.scss';\n\ninterface PropTypes {\n  className?: string;\n  title: string;\n  description: string;\n  image: any;\n  onClick?: () => void;\n}\n\nconst ConsultingCategoryItem = (props: PropTypes) => {\n  const { className = '', title = '', description = '', image, onClick } = props;\n\n  return (\n    <div className={`ConsultingCategoryItem-container ${className}`} onClick={onClick}>\n      <div className=\"ConsultingCategoryItem-up\">\n        <h4 className=\"ConsultingCategoryItem-title\">{title}</h4>\n        <p className=\"ConsultingCategoryItem-desc\">{description}</p>\n      </div>\n      {image && (\n        <div className=\"ConsultingCategoryItem-image\">\n          <KMSImg src={image} alt=\"\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ConsultingCategoryItem;\n","import React, { useMemo, useEffect, useState } from 'react';\nimport moment from 'moment';\n\nimport { HBButtonSmall, HBModalConfirm } from 'hbBaseClass';\nimport { FormGroupSelect, FormGroupDatePicker, ButtonOptions } from 'components';\nimport { AppointmentBtnConfirm } from './bookAppointment';\n\nimport {\n  SCHEDULE_OPTIONS,\n  MAX_SCHEDULE_TIME_START,\n  DEFAULT_SCHEDULE_TIME_START,\n  MAX_TIME_SET_SCHEDULE_TODAY,\n} from 'configs/constants';\nimport {\n  getScheduleTimeOptions,\n  getScheduleTimeStart,\n  getScheduleMinTimeEnd,\n  isValidBookAppointmentSchedule,\n  getDefaultTimeEnd,\n} from 'utilities';\nimport { ScheduleData } from 'types/appointments';\n\nimport './SetSchedule.scss';\n\nconst { TODAY, TOMORROW, LATER } = SCHEDULE_OPTIONS;\n\nconst defaultSpecificDate = new Date(moment().add(2, 'd').format('YYYY-MM-DD'));\nconst maxSpecificDate = new Date(moment().add(21, 'd').format('YYYY-MM-DD'));\n\n/**\n * Get date options\n *\n * @param options List date options\n */\nconst convertDateOptions = (options: string[] = []) => options.map((label: string) => ({ label, value: label }));\n\ninterface PropTypes {\n  className?: string;\n  isEditSchedule?: boolean;\n  scheduleData?: ScheduleData;\n  lbDate?: string;\n  lbTime?: string;\n  onConfirm?: (data?: any) => void;\n}\n\nconst SetSchedule = (props: PropTypes) => {\n  const {\n    className = '',\n    isEditSchedule,\n    scheduleData,\n    lbDate = 'Datum',\n    lbTime = 'Von – Bis',\n    onConfirm = () => {},\n  } = props;\n  const {\n    selectedOption: oldSelectedOption,\n    timeStart: oldTimeStart,\n    timeEnd: oldTimeEnd,\n    specificDate: oldSpecificDate,\n  } = scheduleData || {};\n\n  // get date options\n  const defaultDateOptions = useMemo(() => {\n    const currentTime = moment().format('HH:mm');\n\n    return currentTime > MAX_TIME_SET_SCHEDULE_TODAY ? [TOMORROW, LATER] : [TODAY, TOMORROW, LATER];\n  }, []);\n\n  // states\n  const [dateOptions, setDateOptions] = useState(convertDateOptions(defaultDateOptions));\n  const [selectedOption, setSelectedOption] = useState(oldSelectedOption || dateOptions[0]?.value);\n  const [timeStart, setTimeStart] = useState(\n    oldTimeStart || getScheduleTimeStart(selectedOption === TODAY ? '' : DEFAULT_SCHEDULE_TIME_START),\n  );\n  const [timeEnd, setTimeEnd] = useState(oldTimeEnd || getDefaultTimeEnd(timeStart));\n  const [specificDate, setSpecificDate] = useState(oldSpecificDate || defaultSpecificDate);\n  const [isOpenPopup, setIsOpenPopup] = useState(false);\n\n  // Generate time start options\n  const timeStartOptions = useMemo(() => {\n    const timeStart = selectedOption === TODAY ? getScheduleTimeStart() : '00:00';\n\n    return getScheduleTimeOptions(timeStart, { maxTime: MAX_SCHEDULE_TIME_START });\n  }, [selectedOption]);\n\n  // Generate time end options\n  const timeEndOptions = useMemo(() => getScheduleTimeOptions(getScheduleMinTimeEnd(timeStart, 0.25)), [timeStart]);\n\n  // Convert specific date value\n  const specificDateValue = useMemo(() => moment(specificDate).format('DD.MM.YYYY'), [specificDate]);\n\n  useEffect(() => {\n    // if selectedOption is invalid in list dateOptions => update new option\n    const isValidOption = dateOptions.some((dateOption) => dateOption.value === selectedOption);\n    let newSelectedOption = selectedOption;\n    if (!isValidOption) {\n      newSelectedOption = dateOptions[0]?.value;\n      setSelectedOption(newSelectedOption);\n    }\n\n    // if before timeStart, timeEnd is invalid => auto update new time by current time\n    const isValidTimeStart = timeStartOptions.some((option) => option.value === timeStart);\n    if (!isValidOption || !isValidTimeStart) {\n      const newTimeStart = getScheduleTimeStart(newSelectedOption === TODAY ? '' : DEFAULT_SCHEDULE_TIME_START);\n      setTimeStart(newTimeStart);\n      setTimeEnd(getDefaultTimeEnd(newTimeStart));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Handle change time\n   *\n   * @param isSetTimeStart Set time start or time end\n   * @param e DOM Event\n   */\n  const handleChangeTime = (isSetTimeStart?: boolean) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value = '' } = e.target;\n\n    if (isSetTimeStart) {\n      setTimeStart(value);\n      setTimeEnd(getDefaultTimeEnd(value));\n      return;\n    }\n\n    setTimeEnd(value);\n  };\n\n  /**\n   * Handle change specific date\n   *\n   * @param value Specific date\n   */\n  const handleChangeSpecificDate = (value: Date) => {\n    setSpecificDate(value);\n  };\n\n  /**\n   * Handle change date option\n   *\n   * @param value Date option\n   */\n  const handleChangeDateOption = (value: string) => {\n    const timeStart = getScheduleTimeStart(value === TODAY ? '' : DEFAULT_SCHEDULE_TIME_START);\n    setTimeStart(timeStart);\n    setTimeEnd(getDefaultTimeEnd(timeStart));\n\n    setSelectedOption(value);\n  };\n\n  /**\n   * Handle confirm\n   */\n  const handleConfirm = () => {\n    const isValidSchedule = isValidBookAppointmentSchedule({ selectedOption, specificDate, timeStart });\n\n    // check valid timeStart, timeEnd\n    const isValidTimeStart = timeStartOptions.some((timeItem) => timeItem.value === timeStart);\n    const isValidTimeEnd = timeEndOptions.some((timeItem) => timeItem.value === timeEnd);\n\n    // valid schedule time\n    if (isValidSchedule && isValidTimeStart && isValidTimeEnd) {\n      onConfirm({ selectedOption, specificDate, timeStart, timeEnd });\n      return;\n    }\n\n    setIsOpenPopup(true);\n  };\n\n  /**\n   * Handle dialog confirm\n   */\n  const handleDialogConfirm = () => {\n    setIsOpenPopup(false);\n\n    // Update time start by current time\n    const currentTime = moment().format('HH:mm');\n    let timeStart = getScheduleTimeStart();\n\n    // if current time > 21:45 => set schedule to tomorrow\n    if (currentTime > MAX_TIME_SET_SCHEDULE_TODAY) {\n      setDateOptions(convertDateOptions([TOMORROW, LATER]));\n      setSelectedOption(TOMORROW);\n      timeStart = DEFAULT_SCHEDULE_TIME_START;\n    }\n\n    setTimeStart(timeStart);\n    setTimeEnd(getDefaultTimeEnd(timeStart));\n  };\n\n  return (\n    <div className={`SetSchedule-area ${className}`}>\n      <div className=\"SetSchedule-container\">\n        <div className=\"SetSchedule-chooseDate\">\n          <div className=\"SetSchedule-listDates\">\n            <h5 className=\"AppointmentLayout-subLabel\">{lbDate}</h5>\n            <ButtonOptions\n              className=\"SetSchedule-options\"\n              value={selectedOption}\n              options={dateOptions}\n              onClick={handleChangeDateOption}\n            />\n          </div>\n          {selectedOption === LATER && (\n            <div className=\"SetSchedule-datePicker\">\n              <h5 className=\"SetSchedule-lb\">Datum wählen</h5>\n              <FormGroupDatePicker\n                disabled\n                placeholder=\"TT.MM.JJJJ\"\n                selected={specificDate}\n                value={specificDateValue}\n                minDate={defaultSpecificDate}\n                maxDate={maxSpecificDate}\n                onChange={handleChangeSpecificDate}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"SetSchedule-times\">\n          <h5 className=\"SetSchedule-lb\">{lbTime}</h5>\n          <div className=\"SetSchedule-timesOptions\">\n            <FormGroupSelect value={timeStart} options={timeStartOptions} onChange={handleChangeTime(true)} />\n            <span>und</span>\n            <FormGroupSelect value={timeEnd} options={timeEndOptions} onChange={handleChangeTime()} />\n          </div>\n        </div>\n      </div>\n      {isEditSchedule ? (\n        <div className=\"SetSchedule-actions\">\n          <HBButtonSmall onClick={handleConfirm}>Änderungen übernehmen</HBButtonSmall>\n        </div>\n      ) : (\n        <AppointmentBtnConfirm type=\"submit\" title=\"Speichern\" onClick={handleConfirm} />\n      )}\n      <HBModalConfirm\n        show={isOpenPopup}\n        handleClose={() => setIsOpenPopup(false)}\n        title=\"Information\"\n        content=\"Wir haben nicht genug Zeit, um Ihre Anfrage anzunehmen. Bitte wählen Sie die Zeit erneut\"\n        up=\"Verstanden\"\n        upCallback={handleDialogConfirm}\n      />\n    </div>\n  );\n};\n\nexport default SetSchedule;\n","import { useMemo } from 'react';\n\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { RootState } from 'store';\nimport { updateProfile } from './actions';\n\nexport default function useAuth() {\n  const dispatch = useDispatch();\n  const authReducer = useSelector((state: RootState) => state.auth, shallowEqual);\n\n  return useMemo(\n    () => ({\n      ...authReducer,\n      updateProfile: (payload: any) => dispatch(updateProfile(payload)),\n    }),\n    [dispatch, authReducer],\n  );\n}\n"],"sourceRoot":""}